<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>live(events, handler(eventObject))<br></h2>
   <div class="desc">
      <p>为所有与选择器匹配的元素添加一个事件处理。匹配的元素包括那些目前已经匹配到的元素，也包括那些今后可能匹配到的元素。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.3 新增</span>live(events, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>events</strong>
               								(String)
               								包含 JavaScript 事件类型的字符串。例如 "click" 或 "keydown"。从 jQuery 1.4 开始，该字符串可以包含多个用空格分隔的事件类型或自定义事件名。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4 新增</span>live(events, data, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>events</strong>
               								(String)
               								包含 JavaScript 事件类型的字符串。例如 "click" 或 "keydown"。从 jQuery 1.4 开始，该字符串可以包含多个用空格分隔的事件类型或自定义事件名。
            </div>
            <div class="arguement"><strong>data</strong>
               								(Object)
               								将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>live(events-map)
               								
            </h4>
            <div class="arguement"><strong>events-map</strong>
               								(Object)
               								由一个或多个 JavaScript 事件类型及其对应的执行函数组成的映射。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         
         <p>
            <strong>从 jQuery 1.7 开始</strong>，不再建议使用 <code>.live()</code> 方法。请使用 <code><a href="on.htm">
                  .on()</a></code>
            来添加事件处理。使用旧版本的用户，应该优先使用 <code><a href="delegate.htm">
                  .delegate()</a></code>
            来替代 <code>.live()</code>。
         </p>
         
         
         <p>该函数提供了一种向页面的 <code>document</code> 元素添加代理事件处理的方法，从而简化了在页面上动态添加的内容上事件处理的使用。有关直接添加事件处理和使用代理事件的讨论，请参阅在 <code><a href="on.htm">
                  .on()</a></code>
            方法中的相关说明。
         </p>
         
         
         <p>在 <code>.live()</code> 的后继方法中重写 <code>.live()</code> 方法是很简单的。以下是三种事件添加方法的模板，它们是等价的：
         </p>
         <pre>
$(<em>selector</em>).live(<em>events</em>, <em>data</em>, <em>handler</em>);                // jQuery 1.3+
$(document).delegate(<em>selector</em>, <em>events</em>, <em>data</em>, <em>handler</em>);  // jQuery 1.4.3+
$(document).on(<em>events</em>, <em>selector</em>, <em>data</em>, <em>handler</em>);        // jQuery 1.7+
</pre>
         
         <p><code>events</code> 参数既可以是用空格分隔的事件类型名（还可以包含事件类型对应的可选的命令空间）列表，也可以是由事件名符串及其处理函数组成的 <code>event-map</code>。<code>data</code> 参数是可选的，也可以忽略此参数。例如，以下三种方法在功能上是一样的（后文还提供了更有效，性能更好的添加代理事件处理的方式）：
         </p>
         <pre>
$("a.offsite").live("click", function(){ alert("Goodbye!"); });                // jQuery 1.3+
$(document).delegate("a.offsite", "click", function(){ alert("Goodbye!"); });  // jQuery 1.4.3+
$(document).on("click", "a.offsite", function(){ alert("Goodbye!"); });        // jQuery 1.7+
</pre>
         
         <p>目前已经不再建议使用 <code>.live()</code> 方法，因为新版的 jQuery 提供了更好方法，并且没有此方法中提到的弊端。使用 <code>.live()</code> 会带来如下问题:
         </p>
         
         <ul>
            
            <li>在调用 <code>.live()</code> 方法之前，jQuery 会先获取与指定的选择器匹配的元素，这一点对于大型文档来说是很花费时间的。
            </li>
            
            <li>不支持链式写法。例如，<code>$("a").find(".offsite, .external").live( ... ); </code> 这样的写法是<em>不合法</em>的，并不能像期待的那样起作用。
            </li>
            
            <li>由于所有的 <code>.live()</code> 事件被添加到 <code>document</code> 元素上，所以在事件被处理之前，可能会通过最长最慢的那条路径之后才能被触发。
            </li>
            
            <li>在移动 iOS (iPhone, iPad 和 iPod Touch) 上，对于大多数元素而言，<code>click</code> 事件不会冒泡到文档 body 上，并且如果不满足如下情况之一，就不能和 <code>.live()</code> 方法一起使用：
               
               <ol>
                  
                  <li>使用原生的可被点击的元素，例如, <code>a</code> 或 <code>button</code>，因为这两个元素可以冒泡到 <code>document</code>。
                  </li>
                  
                  <li>在 <code>document.body</code> 内的元素使用 <code>.on()</code> 或 <code>.delegate()</code> 进行绑定，因为移动 iOS 只有在 body 内才能进行冒泡。
                  </li>
                  
                  <li>需要 click 冒泡到元素上才能应用的 CSS 样式 <code>cursor:pointer</code> (或者是父元素包含 <code>document.documentElement</code>)。但是依需注意的是，这样会禁止元素上的复制/粘贴功能，并且当点击元素时，会导致该元素被高亮显示。
                  </li>
                  
               </ol>
               
            </li>
            	       
            <li>在事件处理中调用 <code><a href="event.stopPropagation.htm">
                     event.stopPropagation()</a></code>
               来阻止事件处理被添加到 document 之后的节点中，是效率很低的。因为事件已经被传播到 <code>document</code> 上。
            </li>
            
            <li><code>.live()</code> 方法与其它事件方法的相互影响是会令人感到惊讶的。例如，<code>$(document).unbind("click")</code> 会移除所有通过 <code>.live()</code> 添加的 click 事件!
            </li>
            
         </ul>
         
         
         <p>如果依然在使用 <code>.live()</code>，那么下面关于该方法在不同版中的区别，可能会对您有一定帮助：
         </p>
         
         <ul>
            
            <li>在 jQuery 1.7 之前，如果想阻止通过 <code>.live()</code> 绑定的事件被冒泡到其它元素上，必须在事件处理中返回 <code>false</code>。调用 <code>.stopPropagation()</code> 是不起作用的。
            </li>
            
            <li>从 <b>jQuery 1.4</b> 开始，<code>.live()</code> 方法支持自定义事件，也支持<em>所有 JavaScript 事件冒泡</em>。
            </li>
            
            <li>在 <b>jQuery 1.3.x</b> 中，只能绑定如下 JavaScript 事件：<code>click</code>, <code>dblclick</code>, <code>keydown</code>, <code>keypress</code>, <code>keyup</code>, <code>mousedown</code>, <code>mousemove</code>, <code>mouseout</code>, <code>mouseover</code>, 和 <code>mouseup</code>.
            </li>
            
         </ul>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>点击段落时，添加另一个段落。注意，.live() 会为所有的段落(包括新生成的段落)绑定事件。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { background:yellow; font-weight:bold; cursor:pointer;
      padding:5px; }
  p.over { background: #ccc; }
  span { color:red; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;Click me!&lt;/p&gt;

  &lt;span&gt;&lt;/span&gt;

&lt;script&gt;


$("p").live("click", function(){
  $(this).after("&lt;p&gt;Another paragraph!&lt;/p&gt;");
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>通过返回 false 的方法，取消默认的动作，并阻止事件向上冒泡。</p>
      <h5>jQuery 代码:</h5><pre><code>$("a").live("click", function() { return false; })</code></pre><h3>示例:</h3>
      <p>通过使用 preventDefault 方法仅取消默认的动作。</p>
      <h5>jQuery 代码:</h5><pre><code>$("a").live("click", function(event){
  event.preventDefault();
});</code></pre><h3>示例:</h3>
      <p>使用 .live() 绑定自定义事件。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:red; }
  span { color:blue; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;p&gt;Has an attached custom event.&lt;/p&gt;
  &lt;button&gt;Trigger custom event&lt;/button&gt;
  &lt;span style="display:none;"&gt;&lt;/span&gt;
  

&lt;script&gt;


$("p").live("myCustomEvent", function(e, myName, myValue) {
  $(this).text("Hi there!");
  $("span").stop().css("opacity", 1)
           .text("myName = " + myName)
           .fadeIn(30).fadeOut(1000);
});
$("button").click(function () {
  $("p").trigger("myCustomEvent");
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>使用映射绑定多个事件处理。注意，.live() 会为所有的段落(包括新生成的段落)绑定 click, mouseover, 和 mouseout 事件。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { background:yellow; font-weight:bold; cursor:pointer; padding:5px; }
  p.over { background: #ccc; }
  span { color:red; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;p&gt;Click me!&lt;/p&gt;
  &lt;span&gt;&lt;/span&gt;
  

&lt;script&gt;


$("p").live({
  click: function() {
    $(this).after("&lt;p&gt;Another paragraph!&lt;/p&gt;");
  },
  mouseover: function() {
    $(this).addClass("over");
  },
  mouseout: function() {
    $(this).removeClass("over");
  }
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>