<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jqXHR</span>jQuery.getScript(url, <em class="optional">[success(data, textStatus)]</em>)<br></h2>
   <div class="desc">
      <p>通过 HTTP GET 方式从服务器请求一个 JavaScript 文件，并执行它。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>jQuery.getScript(url, <em class="optional">[success(data, textStatus)]</em>)
               								
            </h4>
            <div class="arguement"><strong>url</strong>
               								(String)
               								将要被请求的 URL 字符串。
            </div>
            <div class="arguement"><strong>success(data, textStatus)</strong>
               								(Function)
               								 可选参数，当请求成功后执行的回调函数。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>这是一个 Ajax 函数的简写形式，它等价于：</p>
         <pre>$.ajax({
  url: <em>url</em>,
  dataType: "script",
  success: <em>success</em>
});
</pre>
         <p>这里的回调函数会传入返回的 JavaScript 文件。但这通常没什么用，因为此时脚本已经运行过了。</p>
         
         <p>载入的脚本会以全局的上下文来执行，所以它可以访问页面上其它的变量，或者运行 jQuery 函数。即，被加载的脚本同样作用于当前页面，例如：</p>
         <pre>$(".result").html("&lt;p&gt;Lorem ipsum dolor sit amet.&lt;/p&gt;");</pre>
         <p>通过文件名就可以动态载入并运行脚本了。例如：</p>
         <pre>$.getScript('ajax/test.js', function(data, textStatus){
   console.log(data); //data returned
   console.log(textStatus); //success
   console.log('Load was performed.');
});</pre>
         <p>
            <strong>注意:</strong> 当调用 <code>getScript()</code> 时，如果你想要添加一个错误处理的回调函数，可以使用全局的 <code>ajaxError()</code> 回调函数。例如：
         </p>
         <pre>
$( "div.log" ).ajaxError(function(e, jqxhr, settings, exception) {
  if (settings.dataType=='script') {
    $(this).text( "Triggered ajaxError handler." );
  }
});
</pre>
         </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>动态载入 jQuery 官方颜色插件，并且在载入成功后绑定一些色彩动画。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
.block {
   background-color: blue;
   width: 150px;
   height: 70px;
   margin: 10px;
}&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;button id="go"&gt;&amp;raquo; Run&lt;/button&gt;

&lt;div class="block"&gt;&lt;/div&gt;


&lt;script&gt;


$.getScript("http://api.jquery.com/scripts/jquery.color.js", function() {
  $("#go").click(function(){
    $(".block").animate( { backgroundColor: "pink" }, 1000)
      .delay(500)
      .animate( { backgroundColor: "blue" }, 1000);
  });
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>