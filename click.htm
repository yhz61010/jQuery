<!DOCTYPE HTML>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>click(handler(eventObject))<br></h2>
   <div class="desc">
      <p>为 JavaScript 的 "click" 事件绑定一个处理函数，或者触发元素上的该事件。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>click(handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>click(<em class="optional">[eventData]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>eventData</strong>
               								(Object)
               								 可选参数，将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>click()
               								
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>带有参数的该方法是 <code>.bind('click', handler)</code> 的快捷方式，并且，从 jQuery 1.7 开始，也是 <code>.on("click", handler)</code> 的快捷方式。不带参数的该方法是 <code>.trigger('click')</code> 的快捷方式。
         </p>
         
         <p>当用户在元素上点击了鼠标，就会触发 <code>click</code> 事件。任何 HTML 元素都可以接收该事件。
         </p>
         <pre>举例来说，请看下面的HTML：
&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
         
         <p class="image">
            <img src="images/0042_05_03.png" alt="">
            
         </p>
         
         <p>可以将该事件绑定到任何 <code>&lt;div&gt;</code> 上：
         </p>
         <pre>$('#target').click(function() {
  alert('Handler for .click() called.');
});</pre>
         <p>现在，当你在该元素上点击鼠标时，就会显示提示框：</p>
         
         <p>
            <span class="output">Handler for .click() called.</span>
            
         </p>
         
         <p>可以通过点击其它元素来手动触发另一个元素的该事件：</p>
         <pre>$('#other').click(function() {
  $('#target').click();
});</pre>
         <p>在代码执行后，如果你点击 <span class="output">Trigger the handler</span> 将同样会弹出上面的消息。
         </p>
         
         <p><code>click</code> 事件只有满足以下条件时，才能被触发：
         </p>
         
         <ul>
            
            <li>鼠标已经被按下，并且鼠标指针在目标元素的内部。</li>
            
            <li>鼠标松开时，鼠标指针依然在该元素的内部。</li>
            
         </ul>
         
         <p>该事件通常用于处理目标元素内部的鼠标点击事件。如果只关心鼠标是否被点击，那么使用 <code>mousedown</code> 或 <code>mouseup</code> 事件可能更合适。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>当在段落元素上点击时，隐藏所点击的段落：</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:red; margin:5px; cursor:pointer; }
  p:hover { background:yellow; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;First Paragraph&lt;/p&gt;

  &lt;p&gt;Second Paragraph&lt;/p&gt;
  &lt;p&gt;Yet one more Paragraph&lt;/p&gt;

&lt;script&gt;


    $("p").click(function () {
      $(this).slideUp();
    });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>触发页面上所有段落的 click 事件：</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").click();</code></pre></div>
</div>