<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>toggle(handler(eventObject), handler(eventObject), <em class="optional">[handler(eventObject)]</em>)<br></h2>
   <div class="desc">
      <p>为匹配的元素绑定两个或多个事件，用于点击事件时切换使用。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>toggle(handler(eventObject), handler(eventObject), <em class="optional">[handler(eventObject)]</em>)
               								
            </h4>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								偶数次点击时，执行的函数。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								奇数次点击时，执行的函数。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								 可选参数，可选函数，参与循环点击的，用于上述循环点击外执行的函数。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <blockquote>
            
            <p>注意： jQuery 同样提供的一个动画方法，也叫 <a href="toggle.htm">.toggle()</a>。动画的 .toggle() 应用于元素的可见性。究竟哪一个方法会被执行，取决于传递的参数设置。
            </p>
            
         </blockquote>
         	    
         <p><code>.toggle()</code> 方法绑定方法用于 <code>click</code> 事件，因此，对于 <code>click</code> 事件适用的规则，同样也适用于该事件。
         </p>
         <pre>举例来说，请看下面的HTML：
&lt;div id="target"&gt;
  Click here
&lt;/div&gt;</pre>
         
         <p>可以将事件绑定在 <code>&lt;div&gt;</code> 上：
         </p>
         <pre>$('#target').toggle(function() {
  alert('First handler for .toggle() called.');
}, function() {
  alert('Second handler for .toggle() called.');
});</pre>
         <p>当反复在元素上点击时，会轮流显示以下信息：</p>
         
         <p>
            <span class="output">First handler for .toggle() called.</span>
            <br>
            <span class="output">Second handler for .toggle() called.</span>
            <br>
            <span class="output">First handler for .toggle() called.</span>
            <br>
            <span class="output">Second handler for .toggle() called.</span>
            <br>
            <span class="output">First handler for .toggle() called.</span>
            
         </p>
         
         <p>如果提供的函数多于两个，<code>.toggle()</code> 也将会循环这些事件。例如，如果提供了三个函数，那么第一个事件会在第一次，第四次，第七次这样的点击次数时被调用
         </p>
         
         <p>之所以要有 <code>.toggle()</code> 方法，主要是出于使用方便的角度。它采用相对简单的实现，完成了需要人工实现的同样行为。如果内置的 <code>.toggle()</code> 的假设被证明是受限的，那么这可能是必要的。（原文如下：It is relatively straightforward to implement the same behavior by hand, and this can be necessary
            if the assumptions built into <code>.toggle()</code> prove limiting.）例如，如果在相同的元素上绑定了两个 <code>.toggle()</code> 事件，那么无法保证它们能正确的工作。因为 <code>.toggle()</code> 内部使用了 <code>click</code> 进行处理，所以我们必须先解除 <code>click</code> 事件的绑定，移除 <code>.toggle()</code> 的附属行为。这样的话，其它的 <code>click</code> 处理，就会出现麻烦。在 <code>.toggle()</code> 的实现中，同样调用了 <code>.preventDefault()</code>，因此，链接将不会被触发。并且，如果已经调用了元素上的 <code>.toggle()</code> 事件，那么，按钮的点击事件也不会被触发。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>点击列表项，切换它们的高亮效果。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  ul { margin:10px; list-style:inside circle; font-weight:bold; }
  li { cursor:pointer; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
    &lt;li&gt;Go to the store&lt;/li&gt;
    &lt;li&gt;Pick up dinner&lt;/li&gt;
    &lt;li&gt;Debug crash&lt;/li&gt;

    &lt;li&gt;Take a jog&lt;/li&gt;
  &lt;/ul&gt;

&lt;script&gt;


    $("li").toggle(
      function () {
        $(this).css({"list-style-type":"disc", "color":"blue"});
      },
      function () {
        $(this).css({"list-style-type":"disc", "color":"red"});
      },
      function () {
        $(this).css({"list-style-type":"", "color":""});
      }
    );



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>切换表格的样式：</p>
      <h5>jQuery 代码:</h5><pre><code>$("td").toggle(
  function () {
    $(this).addClass("selected");
  },
  function () {
    $(this).removeClass("selected");
  }
);</code></pre></div>
</div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>toggle(<em class="optional">[duration]</em>, <em class="optional">[callback]</em>)<br></h2>
   <div class="desc">
      <p>显示或隐藏匹配的元素。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>toggle(<em class="optional">[duration]</em>, <em class="optional">[callback]</em>)
               								
            </h4>
            <div class="arguement"><strong>duration</strong>
               								(String,Number)
               								 可选参数，字符串("slow"或 "fast")或表示动画时长的毫秒数值。
            </div>
            <div class="arguement"><strong>callback</strong>
               								(Callback)
               								 可选参数，在动画完成时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>toggle(<em class="optional">[duration]</em>, <em class="optional">[easing]</em>, <em class="optional">[callback]</em>)
               								
            </h4>
            <div class="arguement"><strong>duration</strong>
               								(String,Number)
               								 可选参数，字符串("slow"或 "fast")或表示动画时长的毫秒数值。
            </div>
            <div class="arguement"><strong>easing</strong>
               								(String)
               								 可选参数，要使用的缓冲效果的名称<del>，默认值是 "swing"。jQuery 内置提供 "linear" 和 "swing" 两种效果，如果要使用更多缓冲效果，需要插件支持</del>。
            </div>
            <div class="arguement"><strong>callback</strong>
               								(Callback)
               								 可选参数，在动画完成时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.3 新增</span>toggle(showOrHide)
               								
            </h4>
            <div class="arguement"><strong>showOrHide</strong>
               								(Boolean)
               								布尔值，代表是否应该显示或隐藏元素。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         	    
         <blockquote>
            
            <p>注意: 在事件处理模块中，也有一个叫 <a href="toggle-event.htm">.toggle()</a> 的方法。但哪一个会被执行，取决于传递的参数设置。
            </p>
            
         </blockquote>
         
         <p>可以非常方便的使用没有任何参数的 <code>.toggle()</code> 方法来切换元素的显示或隐藏状态：
         </p>
         <pre>$('.target').toggle();
</pre>
         <p>该方法会改变匹配元素 CSS 的 <code>display</code> 属性，使匹配的元素立刻显示或隐藏，而且没有动画效果。如果元素一开始是显示的，调用该方法后，它会被隐藏。如果元素一开始是隐藏的，调用该方法后，它会被重新显示出来。根据不同的状态，<code>display</code> 属性的值会被保存和还原。如果元素的 <code>display</code> 的值是 <code>inline</code>，那么当它先隐藏再显示时，<code>display</code> 的值依然是 <code>inline</code>。
         </p>
         
         <p>如果提供了 duration 参数， <code>.toggle()</code> 就变成一个动画方法了。<code>.toggle()</code> 会同时对元素的高、宽以及透明度进行动画操作。 当它们的属性值变为0时，<code>display</code> 样式的属性会被设置成 <code>none</code> ，以此来保证运行动画的那个元素不再影响页面的布局。 
         </p>
         
         <p>duration 参数可以提供一个毫秒数，代表动画运行的时间，时间越长动画越慢。还可以提供字符串 <code>'fast'</code> 和 <code>'slow'</code> ，分别对应了 <code>200</code> 和 <code>600</code> 毫秒。<del>如果没有设置 <code>duration</code> 参数，或者设置成其他无法识别的字符串，就会使用默认值 400 毫秒。</del></p>
         
         <p>从 jQuery 1.4.3 起，增加了一个可选的参数，用于确定使用的缓冲函数。缓冲函数确定了动画在不同位置的速度。jQuery默认只提供两个缓冲效果：<code>swing</code>（默认值） 和 线性缓冲效果<code>linear</code>。更多特效需要使用插件。可以访问 <a href="http://jqueryui.com">jQuery UI 网站</a> 来获得更多信息。
         </p>
         
         <p>如果提供了回调函数，那么当动画结束时，会调用这个函数。通常用来按顺序执行一组不同的动画。这个函数不接受任何参数，但是 <code>this</code> 会设成将要执行动画的那个元素。如果对多个元素设置动画，那么要非常注意，回调函数会在每一个元素执行完动画后都执行一次，而不是这组动画整体才执行一次。
         </p>
         
         <p>我们可以对任何元素应用动画，比如下面这个例子，对图片应用动画：</p>
         <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
</pre>
         <p>当点击 div 时，将会在 id 为 "book" 的元素上，调用 <code>.toggle()</code> 方法。例如：
         </p>
         <pre>$('#clickme').click(function() {
  $('#book').toggle('slow', function() {
    // Animation complete.
  });
});
</pre>
         <p>图片一开始是显示的，第一次点击 div 之后，图片会被慢慢隐藏起来（以下是执行过程中的效果图）：
            
         </p>
         
         <p class="image four-across"> 
            <img src="images/0042_06_09.png" alt="">
            <img src="images/0042_06_10.png" alt="">
            <img src="images/0042_06_11.png" alt="">
            <img src="images/0042_06_12.png" alt="">
            
         </p>
         
         <p>第二次点击 div 时，图片会被慢慢显示出来（以下是执行过程中的效果图）：</p>
         
         <p class="image four-across">
            <img src="images/0042_06_13.png" alt="">
            <img src="images/0042_06_14.png" alt="">
            <img src="images/0042_06_15.png" alt="">
            <img src="images/0042_06_16.png" alt="">
            
         </p>
         
         <p>toggle(showOrHide) 方法接收一个布尔值。如果该值为 <code>true</code>，则匹配的元素会被显示，如果该值为 <code>false</code>，则元素会被隐藏。从本质上讲，以下语句:
            
         </p>
         <pre>$('#foo').toggle(showOrHide);</pre>
         <p>等价于：</p>
         <pre>if ( showOrHide == true ) {
  $('#foo').show();
} else if ( showOrHide == false ) {
  $('#foo').hide();
}
</pre>
         </div>
      <h3 id="notes-0">补充说明:</h3>
      <div class="longdesc">
         <ul>
            <li>所有的 jQuery 动画, 包括 <code>.toggle()</code>, 都可以被关闭，通过全局设置 <code>jQuery.fx.off = true</code>, 效果等同于将动画时间 duration  设置成 0. 可以访问 <a href="jquery.fx.off.htm">jQuery.fx.off</a> 来获得更多信息。
            </li>
         </ul>
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>切换所有段落的显示或隐藏状态。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;

&lt;script&gt;



$("button").click(function () {
$("p").toggle();
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>在 600 毫秒内，以动画的形式切换所有段落的显示或隐藏状态。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
p { background:#dad;
font-weight:bold;
font-size:16px; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button&gt;Toggle 'em&lt;/button&gt;

&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;

&lt;script&gt;


$("button").click(function () {
$("p").toggle("slow");
});    


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>点击按钮时，显示所有的段落，再次点击时，隐藏它们，如此往复。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;

&lt;script&gt;



var flip = 0;
$("button").click(function () {
$("p").toggle( flip++ % 2 == 0 );
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe></div>
</div>