<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:Array</span>jQuery.map(array, callback(elementOfArray, indexInArray))<br></h2>
   <div class="desc">
      <p>为数组或对象中的每一个元素应用一个转换函数，并将转换后的结果添加到新生成的数组中。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>jQuery.map(array, callback(elementOfArray, indexInArray))
               								
            </h4>
            <div class="arguement"><strong>array</strong>
               								(Array)
               								用于应用转换的数组。
            </div>
            <div class="arguement"><strong>callback(elementOfArray, indexInArray)</strong>
               								(Function)
               								处理每一个元素的函数。第一个参数是数组元素，第二个参数是该元素的索引值。该函数可以返回任何值。在函数内部，<code>this</code> 是指向全局(window)对象的。
            </div>
         </li>
         <li>
            <h4><span>1.6 新增</span>jQuery.map(arrayOrObject, callback( value, indexOrKey ))
               								
            </h4>
            <div class="arguement"><strong>arrayOrObject</strong>
               								(Array,Object)
               								用于应用转换的数组或对象。
            </div>
            <div class="arguement"><strong>callback( value, indexOrKey )</strong>
               								(Function)
               								处理每一个元素的函数。第一个参数是数组中元素或对象的值，第二个参数是该元素在数组中的索引值或该对象的键。该函数可以返回任何值，该返回值会被添加到数组中。若返回是数组，则会将该数组中的元素添加到最终的结果数组中。在函数内部，<code>this</code> 是指向全局(window)对象的。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>$.map()</code> 方法会在数组的每一个元素或对象上应用一个函数并将结果映射到一个新的数组中。<strong>在 jQuery 1.6 之前</strong>， <code>$.map()</code> <em>仅支持遍历数组</em>。<strong>从 jQuery 1.6 开始</strong>，该方法还支持遍历对象。
         </p>
         
         <p>类数组（Array-like）对象（也就是那些含有 <code>.length</code> 属性<em>以及</em>在索引值为 <code>.length - 1</code> 的位置处有值的对象）必须将其转化成真正的数组之后才能使用 <code>$.map()</code> 方法。jQuery 库提供了 <a href="jQuery.makeArray.htm">$.makeArray()</a> 方法来完成这样的转换。
         </p>
         <pre class="prettyprint">
// The following object masquerades as an array.
var fakeArray = {"length": 1, 0: "Addy", 1: "Subtracty"};

// Therefore, convert it to a real array
var realArray = $.makeArray( fakeArray )

// Now it can be used reliably with $.map()
$.map( realArray, function(val, i) {
  // do something 
});
</pre>
         <p>在该方法中提供的转换函数会应用在数组或对象的顶级（top-level）元素上，并且该转换函数中有两个参数：元素在数组或对象中的值及该值所对应的索引值或键。</p>
         
         <p>转换函数可以返回如下值:</p>
         
         <ul>
            
            <li>转换后的值，该值会被映射到最终的结果数组中</li>
            
            <li><code>null</code> 或 <code>undefined</code>，用于移除该元素
            </li>
            
            <li>数组，会将该数组中的元素添加到最终的结果数组中</li>
            
         </ul>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>两个使用 .map() 的例子。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  div { color:blue; }
  p { color:green; margin:0; }
  span { color:red; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div&gt;&lt;/div&gt;
  &lt;p&gt;&lt;/p&gt;
  &lt;span&gt;&lt;/span&gt;
  

&lt;script&gt;


    var arr = [ "a", "b", "c", "d", "e" ];
    $("div").text(arr.join(", "));

    arr = jQuery.map(arr, function(n, i){
      return (n.toUpperCase() + i);
    });
    $("p").text(arr.join(", "));

    arr = jQuery.map(arr, function (a) { 
      return a + a; 
    });
    $("span").text(arr.join(", "));



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>将原始数组中的每个值加 4 后，映射到新的数组中。</p>
      <h5>jQuery 代码:</h5><pre><code>$.map( [0,1,2], function(n){
   return n + 4;
 });</code></pre><h5>结果:</h5><pre><code>[4, 5, 6] </code></pre><h3>示例:</h3>
      <p>若原始数组中的值大于 0，则将该值加 1 后，映射到新的数组中，否则在结果数组中将不包含该值。</p>
      <h5>jQuery 代码:</h5><pre><code>$.map( [0,1,2], function(n){
   return n &gt; 0 ? n + 1 : null;
 });</code></pre><h5>结果:</h5><pre><code>[2, 3] </code></pre><h3>示例:</h3>
      <p>将原始数组中每个值及该值加 1 后的值作为返回结果，映射到新生成的数组中。</p>
      <h5>jQuery 代码:</h5><pre><code>$.map( [0,1,2], function(n){
   return [ n, n + 1 ];
 });</code></pre><h5>结果:</h5><pre><code>[0, 1, 1, 2, 2, 3] </code></pre><h3>示例:</h3>
      <p>将原始对象中的每个值乘 2 后，映射到新生成的数组中。</p>
      <h5>jQuery 代码:</h5><pre><code>
var dimensions = { width: 10, height: 15, length: 20 };
dimensions = $.map( dimensions, function( value, index ) {
  return value * 2;
}); </code></pre><h5>结果:</h5><pre><code>[20, 30, 40] </code></pre><h3>示例:</h3>
      <p>将对象中的键映射到新生成的数组中。</p>
      <h5>jQuery 代码:</h5><pre><code>
var dimensions = { width: 10, height: 15, length: 20 },
    keys = $.map( dimensions, function( value, index ) {
      return index;
    }); </code></pre><h5>结果:</h5><pre><code>["width", "height", "length"] </code></pre><h3>示例:</h3>
      <p>将原始数组中每个值的两次方作为返回结果，映射到新生成的数组中。</p>
      <h5>jQuery 代码:</h5><pre><code>
$.map( [0,1,2,3], function (a) { 
  return a * a; 
});</code></pre><h5>结果:</h5><pre><code>[0, 1, 4, 9] </code></pre><h3>示例:</h3>
      <p>在处理函数中，通过返回 null 的方式来移除该元素。移除条件是该值小于 50。同时将未被移除的元素值减小 45。</p>
      <h5>jQuery 代码:</h5><pre><code>
$.map( [0, 1, 52, 97], function (a) {
  return (a &gt; 50 ? a - 45 : null); 
});</code></pre><h5>结果:</h5><pre><code>[7, 52] </code></pre><h3>示例:</h3>
      <p>通过在处理函数中返回数组的方式，在最终返回的结果数组中添加元素。</p>
      <h5>jQuery 代码:</h5><pre><code>var array = [0, 1, 52, 97];
array = $.map(array, function(a, index) {
  return [a - 45, index];
}); </code></pre><h5>结果:</h5><pre><code>[-45, 0, -44, 1, 7, 2, 52, 3] </code></pre></div>
</div>