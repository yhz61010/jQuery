<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>find(selector)<br></h2>
   <div class="desc">
      <p>通过给定的过滤器，jQuery 对象或元素，取得匹配元素集合中每个元素的后代元素。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>find(selector)
               								
            </h4>
            <div class="arguement"><strong>selector</strong>
               								(Selector)
               								用于匹配元素的选择器表达式字符串。
            </div>
         </li>
         <li>
            <h4><span>1.6 新增</span>find(jQuery object)
               								
            </h4>
            <div class="arguement"><strong>jQuery object</strong>
               								(Object)
               								用于查找匹配的 jQuery 对象。
            </div>
         </li>
         <li>
            <h4><span>1.6 新增</span>find(element)
               								
            </h4>
            <div class="arguement"><strong>element</strong>
               								(Element)
               								用于查找匹配的元素。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>若一个 jQuery 对象代表了一个 DOM 元素集合，<code>.find()</code> 方法允许我们在 DOM 树中查找集合中这些元素的后代元素，并根据匹配的元素创建一个新的 jQuery 对象。<code>.find()</code> 和 <code>.children()</code> 方法很类似，只不过后者在 DOM 树中，仅在单一层次上向下遍历。
         </p>
         
         <p><code>.find(selector)</code> 方法还可以接受一个选择器表达式，该选择器表达式可以是任何可传给 <code>$()</code> 函数的选择器表达式。通过这个选择器表达式来过滤出满足匹配条件的元素。
         </p>
         
         <p>例如，在页面上有如下一个基本的嵌套列表：</p>
         <pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
         <p>如果我们从 item II 开始查找的话，我们就可以向下面这样，查找其中的列表项：</p>
         <pre>$('li.item-ii').find('li').css('background-color', 'red');</pre>
         <p>执行上述代码的结果是，列表项 A, B, 1, 2, 3, 和 C 的背景色变为红色。虽然 item II 满足选择器表达式，但在最终的结果中却不包括它，只有它的后代元素才被认为是匹配到的候选元素。</p>
         
         <blockquote>
            
            <p>和其它的遍历方法不同，调用 <code>.find()</code> 时，需要传递选择器表达式参数。如果我们需要返回所有的后代元素，我们可以通过传入全局选择器 <code>'*'</code> 的方式来达到此目的。
            </p>
            
         </blockquote>
         
         <p>
            <a href="http://api.jquery.com/jquery/#selector-context">选择器上下文</a>是通过 <code>.find()</code> 方法来实现的。因此，<code>$('li.item-ii').find('li')</code> 等价于 <code>$('li', 'li.item-ii')</code>。
         </p>
         
         <p>
            <strong>从 jQuery 1.6 开始</strong>，我们也可以通过给定的 jQuery 集合或元素来过滤元素。例如在上面的例子中，我们可以从如下语句开始：
         </p>
         <pre>var $allListElements = $('li');</pre>
         <p>然后传入需要查找的 jQuery 对象：</p>
         <pre>$('li.item-ii').find( $allListElements );</pre>
         <p>其结果是返回一个 jQuery 集合，其中只包含 item II 的后代元素。</p>
         
         <p>同样的，我们也可以传入一个元素：</p>
         <pre>
var item1 = $('li.item-1')[0];
$('li.item-ii').find( item1 ).css('background-color', 'red');
</pre>
         <p>其结果是 item 1 的背景色变成了红色。</p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>查找所有段落中的 span 元素，等同于 $("p span")</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;

&lt;script&gt;


  $("p").find("span").css('color','red');


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>以 span 标签作为 jQuery 集合当做查找用的参数。只有 p 标签中的 span 的背景色会变成红色，其它的 span 的背景色还是蓝色。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
    span { color: blue; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
  &lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
  &lt;div&gt;Did you &lt;span&gt;eat&lt;/span&gt; yet?&lt;/div&gt;

&lt;script&gt;


  var $spans = $('span');
  $("p").find( $spans ).css('color','red');


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>为每个单词添加 span 标签，并为 span 标签添加 hover 事件，并且将含有 t 的单词变为斜体。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { font-size:20px; width:200px; cursor:default; 
      color:blue; font-weight:bold; margin:0 10px; }
  .hilite { background:yellow; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;
  When the day is short
  find that which matters to you
  or stop believing
  &lt;/p&gt;

&lt;script&gt;


  var newText = $("p").text().split(" ").join("&lt;/span&gt; &lt;span&gt;");
  newText = "&lt;span&gt;" + newText + "&lt;/span&gt;";

  $("p").html( newText )
    .find('span')
    .hover(function() { 
      $(this).addClass("hilite"); 
    },
      function() { $(this).removeClass("hilite"); 
    })
  .end()
    .find(":contains('t')")
    .css({"font-style":"italic", "font-weight":"bolder"});



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe></div>
</div>