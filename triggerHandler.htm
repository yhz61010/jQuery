<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:Object</span>triggerHandler(eventType, <em class="optional">[extraParameters]</em>)<br></h2>
   <div class="desc">
      <p>执行绑定在元素上指定事件的所有处理函数。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.2 新增</span>triggerHandler(eventType, <em class="optional">[extraParameters]</em>)
               								
            </h4>
            <div class="arguement"><strong>eventType</strong>
               								(String)
               								包含 JavaScript 事件类型的字符串。例如 <code>click</code> 或 <code>submit</code>。
            </div>
            <div class="arguement"><strong>extraParameters</strong>
               								(Array)
               								 可选参数，传入到事件处理中的额外参数数组。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>.triggerHandler()</code> 方法的行为与 <code>.trigger()</code> 相似，不同之处有如下几点：
         </p>
         
         <ul>
            
            <li><code>.triggerHandler()</code> 方法并不会触发事件的默认行为。(例如，表单提交)。
            </li>
            
            <li><code>.trigger()</code> 会影响所有与 jQuery 对象相匹配的元素，而 <code>.triggerHandler()</code> 仅影响第一个匹配到的元素。
            </li>
            
            <li>使用 <code>.triggerHandler()</code> 创建的事件，并不会在 DOM 树中向上冒泡。如果事件没有被目标元素直接处理，那么它就不会进行任何处理。
            </li>
            
            <li>与普通的方法返回 jQuery 对象(这样就能够使用链式用法)相反，<code>.triggerHandler()</code> 返回最后一个处理的事件的返回值。如果没有触发任何事件，会返回 <code>undefined</code>。
               
            </li>
            
         </ul>
         
         <p>若想了解更多关于本方法的信息，请参阅 <code>
               <a href="trigger.htm">.trigger()</a>
               </code> 方法。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>如果您使用 .triggerHandler() 触发 focus 事件，那么它只会触发绑定了该事件的处理函数，而浏览器的默认 focus 动作是不会被触发的。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button id="old"&gt;.trigger("focus")&lt;/button&gt;
&lt;button id="new"&gt;.triggerHandler("focus")&lt;/button&gt;&lt;br/&gt;&lt;br/&gt;

&lt;input type="text" value="To Be Focused"/&gt;

&lt;script&gt;



$("#old").click(function(){
$("input").trigger("focus");
});
$("#new").click(function(){
$("input").triggerHandler("focus");
});
$("input").focus(function(){
$("&lt;span&gt;Focused!&lt;/span&gt;").appendTo("body").fadeOut(1000);
});



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe></div>
</div>