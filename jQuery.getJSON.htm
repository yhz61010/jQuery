<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jqXHR</span>jQuery.getJSON(url, <em class="optional">[data]</em>, <em class="optional">[success(data, textStatus, jqXHR)]</em>)<br></h2>
   <div class="desc">
      <p>通过 HTTP GET 方式从服务器载入 JSON 编码的数据。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>jQuery.getJSON(url, <em class="optional">[data]</em>, <em class="optional">[success(data, textStatus, jqXHR)]</em>)
               								
            </h4>
            <div class="arguement"><strong>url</strong>
               								(String)
               								将要被请求的 URL 字符串。
            </div>
            <div class="arguement"><strong>data</strong>
               								(Map)
               								 可选参数，发送给服务器的字符串或者映射。
            </div>
            <div class="arguement"><strong>success(data, textStatus, jqXHR)</strong>
               								(Function)
               								 可选参数，当请求成功后执行的回调函数。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>这是一个 Ajax 函数的简写形式，它等价于：</p>
         <pre>$.ajax({
  url: <em>url</em>,
  dataType: 'json',
  data: <em>data</em>,
  success: <em>callback</em>
});
</pre>
         <p>数据会被添加到 URL 中，以 URL 查询字符串的形式发送给服务器。如果 <code>data</code> 参数的值是一个对象(映射)，它会自动被转换成 URL 编码的字符串后再被添加到 URL 中。
         </p>
         
         
         <p>大多数情况下都会指定一个请求成功后的回调函数：</p>
         <pre>$.getJSON('ajax/test.json', function(data) {
  var items = [];

  $.each(data, function(key, val) {
    items.push('&lt;li id="' + key + '"&gt;' + val + '&lt;/li&gt;');
  });

  $('&lt;ul/&gt;', {
    'class': 'my-new-list',
    html: items.join('')
  }).appendTo('body');
});
</pre>
         <p>当然，这个例子需要依赖下面的 JSON 文件结构：</p>
         <pre>{
  "one": "Singular sensation",
  "two": "Beady little eyes",
  "three": "Little birds pitch by my doorstep"
}
</pre>
         <p>使用这种结构,在上面的例中，循环读取返回结果时就创建了一个无序的列表，并将它追加到 body 中。</p>
         
         <p><code>success</code> 回调函数中传入了返回的数据，通常是 JavaScript 对象或是 JSON 格式的数组，使用 <code>
               <a href="jQuery.parseJSON.htm">$.parseJSON()</a>
               </code> 方法进行解析。同时 <code>success</code> 回调函数中还传入了描述返回状态的文本。
         </p>
         
         <p>
            <strong>从 jQuery 1.5 开始</strong>, <code>success</code> 回调函数还会传入一个 <a href="http://api.jquery.com/jQuery.get/#jqxhr-object">"jqXHR" 对象</a> (在 <strong>jQuery 1.4</strong> 中, <code>success</code> 回调函数传入一个 <code>XMLHttpRequest</code> 对象)。但是,由于 JSONP 和跨域的 GET 请求不使用 <abbr title="XMLHTTPRequest">XHR</abbr>,所以，在这种情况下，传入到 <code>success</code> 回调函数中的 <code>(j)XHR</code> 和 <code>textStatus</code> 参数是 undefine。
         </p>
         
         <blockquote>
            
            <p><strong>重要提示：</strong> 从 jQuery 1.4 起，如果 JSON 文件包含语法错误，这个请求会失败而不会返回任何提示信息。因此，请尽量避免频繁地手动编辑 JSON 数据。JSON 是一个数据交换格式，所以它的语法规则比普通的 JavaScript 对象字面量表示法还要严格。比如
               JSON 中的所有字符串都必须用双引号包裹，不管它是属性还是值。更多信息请参考：<a href="http://json.org/">http://json.org/</a>。
            </p>
            
         </blockquote>
         
         <h4 id="jsonp">JSONP</h4>
         
         <p>如果 URL 中包含字符串 "callback=?" (或者其它类似的参数，取决于服务器端 API 是如何定义的)，这个请求就会被看做 JSONP 请求。更多关于 <code>jsonp</code> 数据类型的探讨，请参考 <code><a href="jQuery.ajax.htm">$.ajax()</a></code>。
         </p>
         
         
         
         <h4 id="jqxhr-object">jqXHR 对象</h4>
         
         <p>
            <strong>从 jQuery 1.5 开始</strong>,所有 jQuery 的 Ajax 方法都返回一个 <code>XMLHTTPRequest</code> 对象的超集。由 <code>$.getJSON()</code> 方法返回的 jQuery XHR 对象（也可叫做 "jqXHR") 实现了 Promise 接口，使它拥有 Promise 的所有属性，方法和行为。(详见 <a href="http://api.jquery.com/category/deferred-object/">延迟对象</a> 来获得更多信息)。为了让回调函数的名字统一，便于在 <code>
               <a href="http://api.jquery.com/jQuery.ajax/">$.ajax()</a>
               </code> 里使用, jQuery XHR 对象（也可叫做 "jqXHR")同样也提供了 <code>.error()</code>, <code>.success()</code> 和 <code>.complete()</code> 方法。这些方法都带有一个参数，该参数是一个函数，此函数在 <code>$.ajax()</code> 请求结束时被调用,并且这个函数接收的参数，与调用 <code>$.ajax()</code> 函数时的参数是一致。
         </p>
         
         
         <p>Promise 接口在 jQuery 1.5 里，允许在 <code>$.getJSON()</code> 方法后直接注册 <code>.success()</code>, <code>.complete()</code> 和 <code>.error()</code> 回调函数，甚至允许你在请求已经结束后，注册回调函数。如果该请求已经完成，则回调函数会被立刻调用。
         </p>
         <pre>// Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.getJSON("example.json", function() {
  alert("success");
})
.success(function() { alert("second success"); })
.error(function() { alert("error"); })
.complete(function() { alert("complete"); });

// perform other work here ...

// Set another completion function for the request above
jqxhr.complete(function(){ alert("second complete"); });</pre>
         </div>
      <h3 id="notes-0">补充说明:</h3>
      <div class="longdesc">
         <ul>
            <li>由于浏览器的安全限制，大多数 "Ajax" 请求都服从 <a title="Same Origin Policy on Wikipedia" href="http://en.wikipedia.org/wiki/Same_origin_policy">同源策略(same origin policy)</a>。即无法从不同的域，子域或协议中正确接收数据。
            </li>
            <li>Script 和 JSONP 请求没有同源策略(same origin policy)的限制。</li>
         </ul>
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>用 Flickr 的 JSONP API 载入最近的四张关于猫的图片。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;img{ height: 100px; float: left; }&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div id="images"&gt;

&lt;/div&gt;

&lt;script&gt;


$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?",
  {
    tags: "cat",
    tagmode: "any",
    format: "json"
  },
  function(data) {
    $.each(data.items, function(i,item){
      $("&lt;img/&gt;").attr("src", item.media.m).appendTo("#images");
      if ( i == 3 ) return false;
    });
  });

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>从 test.js 中载入 JSON 数据，并且从返回的 JSON 数据中获得 name 的值。</p>
      <h5>jQuery 代码:</h5><pre><code>$.getJSON("test.js", function(json) {
   alert("JSON Data: " + json.users[3].name);
 });</code></pre><h3>示例:</h3>
      <p>从 test.js 中载入 JSON 数据，传递一个附加的数据，并且从返回的 JSON 数据中获得 name 的值。</p>
      <h5>jQuery 代码:</h5><pre><code>$.getJSON("test.js", { name: "John", time: "2pm" }, function(json) {
    alert("JSON Data: " + json.users[3].name);
    });</code></pre></div>
</div>