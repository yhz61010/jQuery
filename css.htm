<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:String</span>css(propertyName)<br></h2>
   <div class="desc">
      <p>取得第一个匹配元素的 CSS 属性值。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>css(propertyName)
               								
            </h4>
            <div class="arguement"><strong>propertyName</strong>
               								(String)
               								CSS 属性。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>.css()</code> 方法可以很方便的取得第一个匹配元素的属性。对于某些属性而言，浏览器访问它们的方式是不同的，所以该方法对于取得这样的属性是格外的方便(例如，某些方法是通过基于标准浏览器的 <code>getComputedStyle()</code> 方法取得的，而有些方法是通过 IE 中的 <code>currentStyle</code> 和 <code>runtimeStyle</code> 属性取得的)。另外，某些特定的属性，不同浏览器的写法不一（例如,在 IE DOM 实现中 <code>float</code> 属性应该写成 <code>styleFloat</code>。然而，根据 W3C 的规范，应该写成 <code>cssFloat</code>），无论你使用哪种写法，<code>.css()</code> 方法都能返回相同的结果。例如，某元素是浮动在左侧的，下面三种写法都会返回正确的浮动值 <code>left</code>：
         </p>
         				        
         <ol>
            					          
            <li>
               <code>$('div.left').css('float');</code>
               
            </li>
            					          
            <li>
               <code>$('div.left').css('cssFloat');</code>
               
            </li>
            					          
            <li>
               <code>$('div.left').css('styleFloat');</code>
               
            </li>
            				        
         </ol>
         				        
         <p>同样，jQuery 也能正确理解相同属性在 CSS 和 DOM 中的不同写法，将它们一视同仁。例如，jQuery 知道 <code>.css('background-color')</code> 和 <code>.css('backgroundColor')</code> 是相同的，因此能返回正确的结果。不同的浏览器对于 CSS 颜色值返回的结果是不同的，有的会以逻辑值形式返回，有的则会以实际值形式返回。例如, #FFF, #ffffff, 和 rgb(255,255,255)。
         </p>
         				        
         <p>不支持简写的 CSS 属性 (例如， margin, background, border)。假如想返回 margin，请使用诸如: <code>$(elem).css('marginTop')</code> 和 <code>$(elem).css('marginRight')</code> 之类的方法。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>取得所点击的 div 的背景色。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div { width:60px; height:60px; margin:5px; float:left; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;span id="result"&gt;&amp;nbsp;&lt;/span&gt;
&lt;div style="background-color:blue;"&gt;&lt;/div&gt;
&lt;div style="background-color:rgb(15,99,30);"&gt;&lt;/div&gt;

&lt;div style="background-color:#123456;"&gt;&lt;/div&gt;
&lt;div style="background-color:#f11;"&gt;&lt;/div&gt;

&lt;script&gt;


$("div").click(function () {
  var color = $(this).css("background-color");
  $("#result").html("That div is &lt;span style='color:" +
                     color + ";'&gt;" + color + "&lt;/span&gt;.");
});



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>css(propertyName, value)<br></h2>
   <div class="desc">
      <p>为匹配的元素设置一个或多个 CSS 属性。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>css(propertyName, value)
               								
            </h4>
            <div class="arguement"><strong>propertyName</strong>
               								(String)
               								CSS 属性名。
            </div>
            <div class="arguement"><strong>value</strong>
               								(String, Number)
               								属性值。
            </div>
         </li>
         <li>
            <h4><span>1.4 新增</span>css(propertyName, function(index, value))
               								
            </h4>
            <div class="arguement"><strong>propertyName</strong>
               								(String)
               								CSS 属性名。
            </div>
            <div class="arguement"><strong>function(index, value)</strong>
               								(Function)
               								一个函数，返回用于设置的值。<code>this</code> 代表当前元素。index 参数表示元素在集合中的位置。value 参数代表原来的值。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>css(map)
               								
            </h4>
            <div class="arguement"><strong>map</strong>
               								(Map)
               								由属性名及属性值组成的映射。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>和 <code>.prop()</code> 方法一样，<code>.css()</code> 方法可以方便快捷的设置元素的属性。既可以直接使用属性值和属性名设置元素的属性，也可以通过一个由属性名及属性值组成的映射(JavaScript 对象标记)进行设置。
         </p>
         
         <p>同样，jQuery 也能正确理解相同属性在 CSS 和 DOM 中的不同写法，将它们一视同仁。例如，jQuery 知道 <code>.css({'background-color': '#ffe', 'border-left': '5px solid #ccc'})</code> 和 <code>.css({backgroundColor: '#ffe', borderLeft: '5px solid #ccc'})</code> 是相同的，因此能返回正确的结果。注意，在 DOM 标记法中，属性名可以不使用引号包裹，但是在 CSS 标记法中，如果属性名中含有连字符(-)的话，则必须用引号包裹。
         </p>
         
         
         <p>当使用 <code>.css()</code> 进行赋值时，jQuery 会修改元素的 <code>style</code> 属性。例如，<code>$('#mydiv').css('color', 'green')</code> 等价于 <code>document.getElementById('mydiv').style.color = 'green'</code>。如果将属性值设置成空字符串，— 例如， <code>$('#mydiv').css('color', '')</code> — 那么会从元素上移除该属性（若该属性存在的话），该属性之前可能是通过 jQuery 的 <code>.css()</code> 方法设置的 HTML style 属性，也有可能是通过直接对 <code>style</code> 属性进行 DOM 操作而被设置的。它不会移除通过 CSS 规则或 <code>&lt;style&gt;</code> 元素设置的属性。
         </p>
         
         
         <p>从 jQuery 1.6 开始，<code>.css()</code> 也可以像 <code>.animate()</code> 那样，接受相对值。相对值是一个字符串，以 <code>+=</code> 或 <code>-=</code> 开头，会在当前值的基础上进行加减。例如，如果某元素的 padding-left 是 10px，那么执行 <code>.css( "padding-left", "+=15" )</code> 后，得到的 padding-left 就是 25px。
         </p>
         
         
         <p>从 jQuery 1.4 开始，<code>.css()</code> 的参数可以是一个函数：
         </p>
         <pre>$('div.example').css('width', function(index) {
  return index * 50;
});</pre>
         <p>上面的例子会使匹配元素的宽度变大 50 倍。</p>
         
         <p>
            <strong>注意: </strong> 如果给定的函数什么都没有返回(例如， <code>function(index, style){})</code>, 或者返回的是 <code>undefined</code>，那么该属性的属性值不会被修改。适用于只有满足特定的条件时，有选择性的设置属性值的情况。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>当鼠标移动到段落上时，改变文字的颜色。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:blue; width:200px; font-size:14px; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;p&gt;Just roll the mouse over me.&lt;/p&gt;

  &lt;p&gt;Or me to see a color change.&lt;/p&gt;
  

&lt;script&gt;


  $("p").mouseover(function () {
    $(this).css("color","red");
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>将 #box 元素的宽度增加 200 像素。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  #box { background: black; color: snow; width:100px; padding:10px; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;div id="box"&gt;Click me to grow&lt;/div&gt;
  

&lt;script&gt;


  $("#box").one( "click", function () {
    $( this ).css( "width","+=200" );
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>将选中的文字高亮显示。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:blue; font-weight:bold; cursor:pointer; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;p&gt;
  Once upon a time there was a man
  who lived in a pizza parlor. This
  man just loved pizza and ate it all 
  the time.  He went on to be the
  happiest man in the world.  The end.
&lt;/p&gt;

&lt;script&gt;


  var words = $("p:first").text().split(" ");
  var text = words.join("&lt;/span&gt; &lt;span&gt;");
  $("p:first").html("&lt;span&gt;" + text + "&lt;/span&gt;");
  $("span").click(function () {
    $(this).css("background-color","yellow");
  });



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>鼠标悬停在段落上时，改变背景和文字颜色:</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:green; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;p&gt;Move the mouse over a paragraph.&lt;/p&gt;
  &lt;p&gt;Like this one or the one above.&lt;/p&gt;


&lt;script&gt;


  $("p").hover(function () {
    $(this).css({'background-color' : 'yellow', 'font-weight' : 'bolder'});
  }, function () {
    var cssObj = {
      'background-color' : '#ddd',
      'font-weight' : '',
      'color' : 'rgb(0,40,244)'
    }
    $(this).css(cssObj);
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>增加所点击 div 的 大小：</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  div { width: 20px; height: 15px; background-color: #f33; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;div&gt;click&lt;/div&gt;
  &lt;div&gt;click&lt;/div&gt;


&lt;script&gt;


  $("div").click(function() {
    $(this).css({
      width: function(index, value) {
        return parseFloat(value) * 1.2;
      }, 
      height: function(index, value) {
        return parseFloat(value) * 1.2;
      }

    });
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>