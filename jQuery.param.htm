<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
						$("#go_home").animate({
								opacity: 'toggle'
							}, 1000, function(){
								go_home_blink();
							});
					}
					go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:String</span>jQuery.param(obj)<br></h2>
   <div class="desc">
      <p>创建一个数组或者对象的序列化字符串。适用于 URL 查询字符串或者 Ajax 请求。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.2 新增</span>jQuery.param(obj)
               								
            </h4>
            <div class="arguement"><strong>obj</strong>
               								(Array, Object)
               								用于序列化的数组或对象。
            </div>
         </li>
         <li>
            <h4><span>1.4 新增</span>jQuery.param(obj, traditional)
               								
            </h4>
            <div class="arguement"><strong>obj</strong>
               								(Array, Object)
               								用于序列化的数组或对象。
            </div>
            <div class="arguement"><strong>traditional</strong>
               								(Boolean)
               								一个布尔值，用于确定是否使用传统的“浅层”("shallow")序列化。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>将表单元素值转换成序列化的字符串时，jQuery 内部也会使用这个函数。参考 <a href="serialize.htm">.serialize()</a> 获得更多信息。
         </p>
         
         
         <p>从 jQuery 1.3 起，如果传入的 obj 是一个函数，则会执行这个函数并序列化这个函数的返回值，而不再仅仅简单地将这个函数当作字符串处理。</p>
         
         
         <p>从 jQuery 1.4 起，<code>$.param()</code> 方法将会通过深度递归的方式序列化对象，以便符合现代化脚本语言和框架的需求，比如 PHP 和 Ruby on Rails。你也可以通过设置 <code>jQuery.ajaxSettings.traditional = true;</code> 这个选项来全局的禁用这个特性。
         </p>
         
         <p>如果传入的对象是在一个数组中，则它必须是一个对象数组，其格式要跟 <a href="serializeArray.htm">.serializeArray()</a> 返回的格式一样：
         </p>
         <pre>[{name:"first",value:"Rick"},
{name:"last",value:"Astley"},
{name:"job",value:"Rock Star"}]</pre>
         <blockquote>
            
            <p>
               <strong>注意:</strong> 由于某些框架的限制，无法解析序列化数组，所以在传递 <code>obj</code> 参数时要务必小心，尽量不要传递含有对象的数组，或者数组中嵌套其它数组。
            </p>
            
         </blockquote>
         
         <blockquote>
            
            <p>
               <strong>注意:</strong> 由于目前对序列化字符串没有统一的规约，此方法无法对复杂数据结构进行编码，使之可以支持所有语言。但到目前为止， <code>$.param</code> 方法对于对象的序列化还是很有用处的。
            </p>
            
         </blockquote>
         
         <p>在 jQuery 1.4 中，HTML5 的表单元素也已经可以序列化了。</p>
         
         <p>下面我们显示一个代表对象的查询字符串，以及对应的 URI 编码版：</p>
         <pre>var myObject = {
  a: {
    one: 1, 
    two: 2, 
    three: 3
  }, 
  b: [1,2,3]
};
var recursiveEncoded = $.param(myObject);
var recursiveDecoded = decodeURIComponent($.param(myObject));

alert(recursiveEncoded);
alert(recursiveDecoded);
</pre>
         <p><code>recursiveEncoded</code> 和 <code>recursiveDecoded</code> 的值应该是下面的样子：
         </p>
         
         <p>
            <span class="output">a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3</span>
            <br>
            <span class="output">a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3</span>
            
         </p>
         
         <p>如果想要模拟 <code>$.param()</code> 函数在 jQuery 1.4 之前的动作，我们可以将 <code>traditional</code> 参数设置成 <code>true</code>:
         </p>
         <pre>var myObject = {
  a: {
    one: 1, 
    two: 2, 
    three: 3
  }, 
  b: [1,2,3]
};
var shallowEncoded = $.param(myObject, true);
var shallowDecoded = decodeURIComponent(shallowEncoded);

alert(shallowEncoded);
alert(shallowDecoded);
</pre>
         <p>此时，<code>shallowEncoded</code> 和 <code>shallowDecoded</code> 的值就成了下面的样子：
         </p>
         
         <p>
            <span class="output">a=%5Bobject+Object%5D&amp;b=1&amp;b=2&amp;b=3</span>
            <br>
            <span class="output">a=[object+Object]&amp;b=1&amp;b=2&amp;b=3</span>
            
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>Serialize a key/value object.</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;div { color:red; }&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div id="results"&gt;&lt;/div&gt;

&lt;script&gt;



    var params = { width:1680, height:1050 };
    var str = jQuery.param(params);
    $("#results").text(str);


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>序列化一些复杂对象。</p>
      <h5>CSS 代码:</h5><pre><code>div { color:red; }</code></pre><h5>jQuery 代码:</h5><pre><code>
// &lt;=1.3.2: 
$.param({ a: [2,3,4] }) // "a=2&amp;a=3&amp;a=4"
// &gt;=1.4:
$.param({ a: [2,3,4] }) // "a[]=2&amp;a[]=3&amp;a[]=4"

// &lt;=1.3.2: 
$.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) // "a=[object+Object]&amp;d=3&amp;d=4&amp;d=[object+Object]"
// &gt;=1.4: 
$.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) // "a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5"

</code></pre></div>
</div>