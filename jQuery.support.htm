<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:Object</span>jQuery.support
   </h2>
   <div class="desc">
      <p>代表不同浏览器的功能或 bug 的属性集合。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.3 新增</span>jQuery.support
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>与使用 <code>$.browser</code> 来检测 user agent 或者根据不同的浏览器，改变页面的展示效果相比，使用<strong>功能检测</strong>是更好的作法。这意味着，在执行依赖于浏览器功能的代码之前，我们要先测试该功能是否有效，从而确保该功能能正常工作。为了简化该过程，jQuery 进行了很多这样的测试，保证我们使用 <code>jQuery.support</code> 对象的属性时可以得到正确的结果。
         </p>
         
         <p>所有支持的属性值用来进行功能检测（不使用任何形式的浏览器侦测方法）。</p>
         
         
         <blockquote>
            
            <p>以下是一些解释功能检测是如何工作的资源：</p>
            
            <ul>
               
               <li>
                  <a href="http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting">http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting</a>
                  
               </li>
               
               <li>
                  <a href="http://www.jibbering.com/faq/faq_notes/not_browser_detect.html">http://www.jibbering.com/faq/faq_notes/not_browser_detect.html</a>
                  
               </li>
               
               <li>
                  <a href="http://yura.thinkweb2.com/cft/">http://yura.thinkweb2.com/cft/</a>
                  
               </li>
               
            </ul>
            
         </blockquote>
         
         <p>虽然 jQuery 已经包含了很多属性，但开发者在有特殊需求的时候，应该可以自由的向 jQuery 中添加自己所需的属性。很多 <code>jQuery.support</code> 属性还是相当底层的，这对于插件开发和 jQuery 核心开发而言是十分有用的，但是相对于一般使用者而言，并不是十分方便。由于 jQuery 内部需要进行这些测试，因此，<em>每次</em>页面加载时，都必须进行这些测试。由于这个原因，下面列出了 jQuery 短期保存的及本身所需要的属性。
         </p>
         
         
         <p>下面列出了 <code>jQuery.support</code> 所进行的测试：
         </p>
         
         <ul>
            
            <li>
               <code>ajax</code> 如果浏览器能创建 <code>XMLHttpRequest</code> 对象，则返回 true。
            </li>
            
            <li>
               <code>boxModel</code> 如果页面是根据 <a href="http://www.w3.org/TR/REC-CSS2/box.html">W3C CSS Box Model</a> (当 IE 6 和 7 工作在 Quirks 模式下，该属性值是 false) 进行描绘的，则返回 true。在文档 ready 发生之前，该属性值一直是 null。
            </li>
            
            <li>
               <code>changeBubbles</code> 如果 change 事件满足 <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-htmlevents">W3C DOM event model</a> 的要求，在 DOM 树中向上冒泡时，则返回 true。(目前 IE 会返回 false，因为冒泡行为是 jQuery 模拟的。)
            </li>
            
            <li>
               <code>checkClone</code> 如果浏览器正确克隆了文档片断中的复选框或单选按键的状态，则返回 true。
            </li>
            
            <li>
               <code>checkOn</code> 当复选框在没有赋值的情况下，其默认值是 "on"，则返回 true。
            </li>
            
            <li>
               <code>cors</code> 如果浏览器能创建 <code>XMLHttpRequest</code> 对象，并且该 <code>XMLHttpRequest</code> 对象含有 <code>withCredentials</code> 属性的话，则返回 true。在尚不支持 cors 属性，但是允许跨域 <abbr title="XMLHttpRequest">XHR</abbr> 请求(例如 windows gadget, 等)的环境下，要启用跨域请求，请进行如下设置 <code>$.support.cors = true;</code>。
               <a href="http://www.w3.org/TR/cors/">CORS WD</a>
               
            </li>
            
            <li>
               <code>cssFloat</code> 如果属性值含有的 CSS float 值是 .cssFloat 的话，则返回 true。其中， .cssFloat 是在 <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties-cssFloat">CSS Spec</a> 中定义的。(目前在 IE 中，该属性的返回值是 false，因为 IE 使用了 styleFloat 来代替该属性)。
            </li>
            
            <li>
               <code>hrefNormalized</code> 如果 <code>.getAttribute()</code> 方法返回的 <code>href</code> 属性值没有发生变化，并不是标准化成完整的 URL 的话，则返回 true。(目前在 IE 中会返回 false，因为 IE 会将 URL 标准化。)
               
               <div>
                  <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-666EE0F9">DOM l3 spec</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>htmlSerialize</code> 如果浏览器能够使用元素的 <code>.innerHTML</code> 属性来序列化/插入 <code>&lt;link&gt;</code> 元素的话，则返回 true。(目前在 IE 中会返回 false)。 
               <div>
                  <a href="http://www.w3.org/TR/2008/WD-html5-20080610/serializing.html#html-fragment">HTML5 WD</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>leadingWhitespace</code> 如果使用 .innerHTML 进行内容插入时，插入后的结果和所提供的内容完全一致，并且保留开头的空白字符，则返回 true。(在 IE 6-8 中返回 false)。 
               <div>
                  <a href="http://www.w3.org/TR/2008/WD-html5-20080610/dom.html#innerhtml0">HTML5 WD</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>noCloneChecked</code> 如果克隆后的 DOM 元素保持了 <code>.checked</code> expando 状态，则返回 true。 (目前在 IE 中会返回 false)。 (在 jQuery 1.5.1 中追加的该属性)
            </li>
            
            <li>
               <code>noCloneEvent</code> 如果克隆后的 DOM 元素上并没有被克隆元素上的事件(也就是说，源元素不是被克隆的。)，则返回 true。(目前在 IE 中会返回 false)。
               <div>
                  <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Registration-interfaces-h3">DOM l2 spec</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>opacity</code> 如果浏览器能正确的处理透明度属性，则返回 true。(目前在 IE 中会返回 false，因为 IE 使用了 alpha 滤镜来代替该属性)。
               <div>
                  <a href="http://www.w3.org/TR/css3-color/#transparency">CSS3 spec</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>optDisabled</code> 如果含有被禁用的 option 元素的 select 元素没有被自动禁用的话，则返回 true。
               <div>
                  <a href="http://dev.w3.org/html5/spec/the-button-element.html#attr-option-disabled">HTML5 WD</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>optSelected</code> 如果被默认选中的 <code>&lt;option&gt;</code> 元素是通过 <code>selected</code> 属性被选中的，则返回 true。
               <div>
                  <a href="http://dev.w3.org/html5/spec/the-button-element.html#attr-option-selected">HTML5 WD</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>scriptEval()</code> 如果通过标准的 DOM 操作方法，例如，<code>.appendChild()</code> 和 <code>.createTextNode()</code>，向文档中插入内嵌脚本时，如果脚本被自动计算并执行了，则返回 true。(目前在 IE 中会返回 false，因为 IE 使用 <code>.text</code> 来插入可执行的脚本)。
               
               <div>
                  <strong>注意: 该属性在 jQuery 1.6 中已经被移除。</strong>在 jQuery 1.5.1 之前，<code>scriptEval()</code> 方法还是一个静态的 <code>scriptEval</code> 属性。将静态属性改成方法，允许测试被推迟到第一次使用时进行，是为了防止违反内嵌脚本的内容安全策略。
               </div>
               
               <div>
                  <a href="http://www.w3.org/TR/2008/WD-html5-20080610/tabular.html#script">HTML5 WD</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>style</code> 如果可以通过 DOM 属性访问元素的 inline 样式，以满足 DOM Level 2 规约，则返回 true。在这种情况下，使用 <code>.getAttribute('style')</code> 能够返回 style 的值。在 Internet Explorer 中，则要使用 <code>.cssText</code> 来达到相同的目的。
               <div>
                  <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-ElementCSSInlineStyle">DOM l2 Style spec</a>
                  
               </div>
               
            </li>
            
            <li>
               <code>submitBubbles</code> submit 事件根据 <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-htmlevents">W3C DOM event model</a> 的规定，能够在 DOM 树中向上冒泡，则返回 true。(目前在 IE 中会返回 false，因为冒泡行为是 jQuery 模拟的)。
            </li>
            
            <li>
               <code>tbody</code> 如果允许一个空的 <code>&lt;table&gt;</code> 元素在没有 <code>&lt;tbody&gt;</code> 元素的情况下存在，则返回 true。根据 HTML 规范，<code>&lt;table&gt;</code> 的子元素是可选的，因此，在完全符合规范的浏览器中，该属性的值应该是 true。如果返回了 false，则我们必须要考虑浏览器隐式注入 <code>&lt;tbody&gt;</code> 标签的可能性。(目前在 IE 中会返回 false，因为如果通过 <code>innerHTML</code> 进行赋值的字符串中不存在 <code>tbody</code> 的话，则 IE 会自动插入 <code>tbody</code>)。
               <div>
                  <a href="http://dev.w3.org/html5/spec/Overview.html#the-table-element">HTML5 spec</a>
                  
               </div>
               
            </li>
            
         </ul>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>为 iframe 返回 box model。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:blue; margin:20px; }
  span { color:red; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;
  &lt;/p&gt;

&lt;script&gt;



    $("p").html("This frame uses the W3C box model: &lt;span&gt;" +
                jQuery.support.boxModel + "&lt;/span&gt;");



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>如果使用 Internet Explorer 时，访问的页面处于 QuirksMode，则返回 false。</p>
      <h5>jQuery 代码:</h5><pre><code>jQuery.support.boxModel</code></pre><h5>结果:</h5><pre><code>false</code></pre></div>
</div>