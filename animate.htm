<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>animate(properties, <em class="optional">[duration]</em>, <em class="optional">[easing]</em>, <em class="optional">[complete]</em>)<br></h2>
   <div class="desc">
      <p>根据一组 CSS 属性，执行自定义动画。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>animate(properties, <em class="optional">[duration]</em>, <em class="optional">[easing]</em>, <em class="optional">[complete]</em>)
               								
            </h4>
            <div class="arguement"><strong>properties</strong>
               								(Map)
               								用于设置动画的 CSS 映射。
            </div>
            <div class="arguement"><strong>duration</strong>
               								(String,Number)
               								 可选参数，字符串("slow"或 "fast")或表示动画时长的毫秒数值。
            </div>
            <div class="arguement"><strong>easing</strong>
               								(String)
               								 可选参数，要使用的缓冲效果的名称<del>，默认值是 "swing"。jQuery 内置提供 "linear" 和 "swing" 两种效果，如果要使用更多缓冲效果，需要插件支持</del>。
            </div>
            <div class="arguement"><strong>complete</strong>
               								(Function)
               								 可选参数，在动画完成时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>animate(properties, options)
               								
            </h4>
            <div class="arguement"><strong>properties</strong>
               								(Map)
               								用于设置动画的 CSS 映射。
            </div>
            <div class="arguement"><strong>options</strong>
               								(Map)
               								传递给方法的一个映射，用于设置额外的选项。支持以下键值:
               
               <ul>
                  
                  <li>
                     <code>duration</code>: 字符串("slow"或 "fast")或表示动画时长的毫秒数值。
                  </li>
                  
                  <li>
                     <code>easing</code>: 要使用的缓冲效果的名称<del>，默认值是 "swing"。jQuery 内置提供 "linear" 和 "swing" 两种效果，如果要使用更多缓冲效果，需要插件支持</del>。
                  </li>
                  
                  <li>
                     <code>complete</code>: 在动画完成时执行的函数。
                  </li>
                  
                  <li>
                     <code>step</code>: 动画执行每一步时调用的函数。
                  </li>
                  
                  <li>
                     <code>queue</code>: 布尔值，代表动画是否应该被添加到动画队列中。如果该值为 <code>false</code>,那么动画会立刻执行。<strong>从 jQuery 1.7 开始</strong>, <code>queue</code> 选项可以是一个字符串，字符串代表的动画将会被添加到队列中。
                  </li>
                  
                  <li>
                     <code>specialEasing</code>: 根据属性参数定义的，由一个或多个 CSS 属性及缓冲函数 (1.4 新增)组成的映射。
                  </li>
                  
               </ul>
               
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>.animate()</code> 方法允许我们在任何数值型 CSS 属性上创建动画。唯一需要的参数就是 CSS 属性映射。这个映射参数与传递给 <code>.css()</code> 方法的映射参数类似,只不过 <code>.animate()</code> 接受的映射参数中，对 CSS 属性的要求更严格（只能是数值型 CSS 属性）。
         </p>
         
         
         <h4 id="animation-properties">动画属性和属性值</h4>
         
         <p>所有动画属性，应该是在 <em>单一数值</em> 上运行的，除了以下提到的一些例外情况。大多数非数值属性是不能利用基本的 jQuery 功能来执行动画的(例如, <code>width</code>, <code>height</code>, 或 <code>left</code> 是可以使用动画的，但是不能在 <code>background-color</code> 上应用动画，除非使用了 <a href="https://github.com/jquery/jquery-color">jQuery.Color()</a> 插件)。默认情况下，属性值的单位是像素，除非指定了其它的单位。可以指定的单位包括 <code>em</code> 和 <code>%</code>。
         </p>
         
         <p>除了样式属性（style properties）外,还可以在一些非样式属性上（例如 <code>scrollTop</code> ， <code>scrollLeft</code> 和自定义属性）应用动画。
         </p>
         
         <p>不完全支持简写的 CSS 属性 (例如， font, background, border)。例如，如果你想对边框的宽度应用动画，那么至少边框的样式和宽度应该是之前已经设置好了的，并且其值不能是 "auto"。或者，如果你想对文字大小应用动画，你应该使用
            <code>fontSize</code> 或等价的 CSS <code>'font-size'</code>，而不是简单的使用 <code>'font'</code>。
         </p>
         
         <p>属性值除了可以是数值以外,还可以是 <code>'show'</code>, <code>'hide'</code>, 和 <code>'toggle'</code> 这样的字符串。这些简称字符串可以用于自定义隐藏和显示动画，控件元素的显示。
         </p>
         
         <p>动画的属性值可以是一个相对值。如果一个值是以 <code>+=</code> 或 <code>-=</code> 开头的字符串，那么目标值会在当前值的基本上进行加减。
         </p>
         
         <blockquote>
            
            <p>
               <strong>注意:</strong> 与 <code>.slideDown()</code> 和 <code>.fadeIn()</code> 方法不同,执行动画时，<code>.animate()</code> 方法<em>不会</em>将隐藏的元素显示出来。例如，在如下隐藏元素上执行动画：<code>$('someElement').hide().animate({height:'20px'}, 500)</code>, 虽然动画会被执行，但是<em>元素仍然是不可见的</em>。
            </p>
            
         </blockquote>
         
         <h4 id="duration">持续时间</h4>
         
         <p>duration 参数可以提供一个毫秒数，代表动画运行的时间，时间越长动画越慢。还可以提供字符串 <code>'fast'</code> 和 <code>'slow'</code> ，分别对应了 <code>200</code> 和 <code>600</code> 毫秒。<del>如果没有设置 <code>duration</code> 参数，或者设置成其他无法识别的字符串，就会使用默认值 400 毫秒。</del></p>
         
         
         <h4 id="complete">Complete 回调函数</h4>
         
         <p>如果提供了 <code>complete</code> 回调函数，那么在动画完成时，该函数会被调用。这对于按顺序执行一系列不同动画时，特别管用。该回调函数没有任何参数，但是 <code>this</code> 会被传递到执行动画的 DOM 元素中。如果有多个元素在执行动画，那么该回调函数会在每个匹配的元素执行完动画后被调用，也就是说，该回调函数会被调用多次，而不是只被调用一次。
         </p>
         
         
         <h4 id="basic-usage">基本用法</h4>
         
         <p>可以对任何元素使用动画。例如，对一个简单的图片应用动画：</p>
         <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123"
  style="position: relative; left: 10px;" /&gt;</pre>
         <p>同时对透明度，左偏移值和高度应用动画：</p>
         <pre>$('#clickme').click(function() {
  $('#book').animate({
    opacity: 0.25,
    left: '+=50',
    height: 'toggle'
  }, 5000, function() {
    // Animation complete.
  });
});
</pre>
         <p class="image">
            <img src="images/animate-1.jpg" alt="">
            
         </p>
         
         <p>注意上面例子中 <code>height</code> 属性的值是 <code>'toggle'</code>。因为图片一开始是显示的，所以执行动画时，该图片的高度会缩小成 0，然后再被隐藏起来。第二次点击时，动画执行过程刚好相反:
            
         </p>
         
         <p class="image">
            <img src="images/animate-2.jpg" alt="">
            
         </p>
         
         
         <p>动画执行完之后，由于图片的 <code>opacity</code> 已经变成之前设定的 0.25，所以在第二次点击按钮执行动画时，图片的 <code>opacity</code> 将不会再发生变化，也就是说该属性上不会有动画效果。由于 <code>left</code> 属性是一个相对值，所以当再次执行动画时，图片会继续向右移动。
         </p>
         
         <p>关于定位属性(例如，<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>)，如果元素的 <code>position</code> 属性是 <code>static</code>（该值为默认值），那么在执行动画时，该属性上不会有明显的动画效果。
         </p>
         
         <blockquote>
            
            <p>
               <strong>注意: </strong> 在 <a href="http://jqueryui.com">jQuery UI</a> 中，扩展了 <code>.animate()</code> 方法，允许在一些非数值型样式上应用动画，例如，颜色样式。同时也允许在指定动画的 CSS 样式时，不需要一一设置所需的样式属性，可以通过指定一个样式名的方法来代替。
            </p>
            
         </blockquote>
         
         <blockquote>
            
            <p>
               <strong>注意:</strong> 如果尝试对高度或宽度为 0px 的元素进行动画时，那么该元素的内容是否会被显示，要依赖 overflow 属性。jQuery 在执行动画的过程中，可能会裁剪溢出部分。通过固定原始隐藏元素的大小，可以确保动画流畅的运行。（原文如下：By fixing
               the dimensions of the original element being hidden however, it is possible to ensure that the animation runs smoothly.）可以使用
               <a href="http://www.google.com/search?q=clearfix">clearfix</a> 样式，自动为你的作为容器的元素固定大小，而不需要手动设置。
            </p>
            
         </blockquote>
         
         
         <h4 id="step">Step 回调函数</h4>
         
         <p>可以为 <code>.animate()</code> 提供一个 <code>step</code> 选项 — 一个回调函数,在动画执行每一步时会被调用。该回调函数适用于开启自定义动画或在动画发生时，需要改变动画的场合。该回调函数有两个参数(即，<code>now</code> 和 <code>fx</code>),在函数内部还可以使用 <code>this</code>，它指向正在执行动画的 DOM 元素。
            
         </p>
         
         <ul>
            
            <li>
               <code>now</code>: 执行动画的属性，在当前时刻的属性值（数值类型）
            </li>
            
            <li>
               <code>fx</code>: <code>jQuery.fx</code> 原型对象的引用。它包括一系列属性，例如，<code>elem</code> 代表当前正在执行动画的元素, <code>start</code> 和 <code>end</code> 分别代表正在执行动画的属性的第一个值和最后一个值， <code>prop</code> 代表正在执行的动画属性。
            </li>
            
         </ul>
         
         <p>注意,每个需要执行动画的元素，以及该元素上的每个属性在执行动画时，<code>step</code> 函数都会被调用。假设有两个列表项，在执行如下动画时，<code>step</code> 函数会被调用 4 次：
         </p>
         <pre>$('li').animate({
  opacity: .5,
  height: '50%'
},
{
  step: function(now, fx) {
    var data = fx.elem.id + ' ' + fx.prop + ': ' + now;
    $('body').append('&lt;div&gt;' + data + '&lt;/div&gt;');
  }
});</pre>
         
         
         <h4 id="easing">缓冲效果</h4>
         
         <p><code>.animate()</code> 方法中还有一个字符串参数，那就是在动画执行时，使用的缓冲函数的名字。缓冲函数指定了动画在不同位置的速度。jQuery 默认只提供两个缓冲效果：<code>swing</code>（默认值） 和 线性缓冲效果 <code>linear</code>。更多特效需要使用插件，可以访问 <a href="http://jqueryui.com/">jQuery UI</a> 网站来获得更多信息。
         </p>
         
         
         <h4 id="per-property-easing">每个属性的缓冲效果</h4>
         
         <p>从 jQuery 1.4 开始，可以在 <code>.animate()</code> 中，为每个属性指定缓冲效果。在<code>.animate(properties, [duration], [easing], [complete])</code> 中，每个属性可以使用数组作为参数。properties 参数是一个映射，其键代表 CSS 属性，其值代表缓冲函数。如果为某个属性指定的缓冲函数尚未被定义，那么将会使用 <code>.animate()</code> 方法的 easing 参数来代替。如果 easing 参数也未被定义，那么将会使用默认的缓冲函数 <code>swing</code>。
         </p>
         
         <p>例如下例中，同时对元素的宽和高应用 <code>swing</code> 缓冲函数，对透明度应用 <code>linear</code> 缓冲函数:
         </p>
         <pre>$('#clickme').click(function() {
  $('#book').animate({
    width: ['toggle', 'swing'],
    height: ['toggle', 'swing'],
    opacity: 'toggle'
  }, 5000, 'linear', function() {
      $(this).after('&lt;div&gt;Animation complete.&lt;/div&gt;');
  });
});</pre>
         <p>在 <code>animate(properties, options) </code> 中,options 参数中可以包含 <code>specialEasing</code> 属性，该属性本身是一个映射，其键是 CSS 属性，其值是所使用的缓冲函数。例如下例中，同时在元素的宽和高上使用动画，分别使用 <code>linear</code> 缓冲函数和 <code>easeOutBounce</code> 缓冲函数:
         </p>
         <pre>$('#clickme').click(function() {
  $('#book').animate({
    width: 'toggle',
    height: 'toggle'
  }, {
    duration: 5000,
    specialEasing: {
      width: 'linear',
      height: 'easeOutBounce'
    },
    complete: function() {
      $(this).after('&lt;div&gt;Animation complete.&lt;/div&gt;');
    }
  });
});</pre>
         <p>之前我们提到过，jQuery 默认只提供两个缓冲效果：<code>swing</code>（默认值） 和 线性缓冲效果 <code>linear</code>。因此，要想使用 <code>easeOutBounce</code> 缓冲函数，则需要插件的支持。
         </p>
         
         
      </div>
      <h3 id="notes-0">补充说明:</h3>
      <div class="longdesc">
         <ul>
            <li>所有的 jQuery 动画, 包括 <code>.animate()</code>, 都可以被关闭，通过全局设置 <code>jQuery.fx.off = true</code>, 效果等同于将动画时间 duration  设置成 0. 可以访问 <a href="jquery.fx.off.htm">jQuery.fx.off</a> 来获得更多信息。
            </li>
            <li><del>由于 <code><a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame">
                        requestAnimationFrame()
                        </a></code> 特性的原因，绝对不要在 <code>setInterval</code> 或 <code>setTimeout</code> 方法中设置动画队列。 为了保护CPU资源, 支持 <code>requestAnimationFrame</code> 的浏览器在当前窗口或标签失去焦点时，是不更新动画的。如果你通过 <code>setInterval</code> 或 <code>setTimeout</code> 方法在动画暂停时，持续向队列里添加动画，那么在窗口或标签重新获得焦点时，所有在队列中的动画都会被播放。 为了避免这个潜在的问题,可以在循环时,利用最后一个动画的回调函数，或者给元素添加 <code><a href="queue.htm">
                        .queue()
                        </a></code> 方法来避免这个问题，实现动画的继续播放。
                  </del></li>
         </ul>
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>点击按钮，根据指定的一系列属性，在 div 上应用动画。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div {
background-color:#bca;
width:100px;
border:1px solid green;
}
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button id="go"&gt;&amp;raquo; Run&lt;/button&gt;

&lt;div id="block"&gt;Hello!&lt;/div&gt;

&lt;script&gt;



/* Using multiple unit types within one animation. */

$("#go").click(function(){
  $("#block").animate({
    width: "70%",
    opacity: 0.4,
    marginLeft: "0.6in",
    fontSize: "3em",
    borderWidth: "10px"
  }, 1500 );
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>对 div 应用动画，在 left 属性上使用相对值。执行动画多次，查看相对值的累加效果。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div {
  position:absolute;
  background-color:#abc;
  left:50px;
  width:90px;
  height:90px;
  margin:5px;
}
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button id="left"&gt;&amp;laquo;&lt;/button&gt; &lt;button id="right"&gt;&amp;raquo;&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;


&lt;script&gt;


$("#right").click(function(){
  $(".block").animate({"left": "+=50px"}, "slow");
});

$("#left").click(function(){
  $(".block").animate({"left": "-=50px"}, "slow");
});



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>第一个按钮要执行的动画中，使用了 queue: false 选项，该动画使元素的宽度扩大到了总宽 90%,并且 文字大小也变大了。一旦字体大小改变完了，边框的动画就会开始。
         第二个按钮要执行的动画中，包含了一系列动画，当前一个动画完成时，后一个动画就会开始。
      </p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div {
  background-color:#bca;
  width:200px;
  height:1.1em;
  text-align:center;
  border:2px solid green;
  margin:3px;
  font-size:14px;
}
button {
  font-size:14px;
}
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button id="go1"&gt;&amp;raquo; Animate Block1&lt;/button&gt;
&lt;button id="go2"&gt;&amp;raquo; Animate Block2&lt;/button&gt;
&lt;button id="go3"&gt;&amp;raquo; Animate Both&lt;/button&gt;

&lt;button id="go4"&gt;&amp;raquo; Reset&lt;/button&gt;
&lt;div id="block1"&gt;Block1&lt;/div&gt;
&lt;div id="block2"&gt;Block2&lt;/div&gt;

&lt;script&gt;



$( "#go1" ).click(function(){
  $( "#block1" ).animate( { width: "90%" }, { queue: false, duration: 3000 })
     .animate({ fontSize: "24px" }, 1500 )
     .animate({ borderRightWidth: "15px" }, 1500 );
});

$( "#go2" ).click(function(){
  $( "#block2" ).animate({ width: "90%" }, 1000 )
     .animate({ fontSize: "24px" }, 1000 )
     .animate({ borderLeftWidth: "15px" }, 1000 );
});

$( "#go3" ).click(function(){
  $( "#go1" ).add( "#go2" ).click();
});

$( "#go4" ).click(function(){
  $( "div" ).css({ width: "", fontSize: "", borderWidth: "" });
});



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>对第一个 div 的 left 属性应用动画，在动画执行的过程中，在 step 函数中改变其余 div 的 left 属性。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div {
   position: relative;
   background-color: #abc;
   width: 40px;
   height: 40px;
   float: left;
   margin: 5px;
}
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;p&gt;&lt;button id="go"&gt;Run »&lt;/button&gt;&lt;/p&gt;
&lt;div class="block"&gt;&lt;/div&gt; &lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt; &lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt; &lt;div class="block"&gt;&lt;/div&gt;


&lt;script&gt;


$( "#go" ).click(function(){
  $( ".block:first" ).animate({
    left: 100
  }, {
    duration: 1000,
    step: function( now, fx ){
      $( ".block:gt(0)" ).css( "left", now );
    }
  });
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>对所有段落的高和透明度使用 toggle 动画，用时 600 毫秒。</p>
      <h5>jQuery 代码:</h5><pre><code>$( "p" ).animate({
  height: "toggle", opacity: "toggle"
}, "slow" );</code></pre><h3>示例:</h3>
      <p>对所有段落应用动画，使其 left 属性变为 50，透明度变为 1（即，不透明，可见），用时 500 毫秒。</p>
      <h5>jQuery 代码:</h5><pre><code>$( "p" ).animate({
  left: 50, opacity: 1
}, 500 );
</code></pre><h3>示例:</h3>
      <p>一个使用 'easing' 缓冲函数的例子，只要当你提供的插件中包含 easing 函数即可。注意，以下代码只能在处于隐藏的元素上才会看出效果。</p>
      <h5>jQuery 代码:</h5><pre><code>$( "p" ).animate({
  left: "50px", opacity: 1
}, { duration: 500, queue: false });</code></pre><h3>示例:</h3>
      <p>对所有段落的高和透明度使用 toggle 动画，用时 600 毫秒。</p>
      <h5>jQuery 代码:</h5><pre><code>$( "p" ).animate({
  opacity: "show"
}, "slow", "easein" );</code></pre><h3>示例:</h3>
      <p>对所有段落应用动画，使其 left 属性变为 50，透明度变为 1（即，不透明，可见），用时 500 毫秒。它可以不受队列的限制，也就是说，动画会被立刻执行，而不需要等到动画队列轮到它的时候。</p>
      <h5>jQuery 代码:</h5><pre><code>$( "p" ).animate({
  height: "toggle", opacity: "toggle"
}, { duration: "slow" });</code></pre><h3>示例:</h3>
      <p>一个使用 'easing' 缓冲函数的例子，只要当你提供的插件中包含 easing 函数即可。</p>
      <h5>jQuery 代码:</h5><pre><code>$( "p" ).animate({
  opacity: "show"
}, { duration: "slow", easing: "easein" });</code></pre><h3>示例:</h3>
      <p>一个使用回调函数的例子。第一个参数是一个 CSS 属性数组，第二个参数表示动画耗时 1000 毫秒，第三个参数说明使用的是 easing 缓冲效果, 第四个参数是一个匿名的回调函数。</p>
      <h5>jQuery 代码:</h5><pre><code>$( "p" ).animate({
  height: 200, width: 400, opacity: 0.5
}, 1000, "linear", function() {
  alert("all done");
});
</code></pre></div>
</div>