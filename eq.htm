<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>eq(index)<br></h2>
   <div class="desc">
      <p>选择在匹配的集合中，索引值等于 <code>index</code> 的元素。
      </p>
      <ul class="signatures">
         <li>
            <h4><span>1.1.2 新增</span>eq(index)
               								
            </h4>
            <div class="arguement"><strong>index</strong>
               								(Integer)
               								匹配元素用的索引值。索引值从 0 开始计数。
            </div>
         </li>
         <li>
            <h4><span>1.4 新增</span>eq(-index)
               								
            </h4>
            <div class="arguement"><strong>-index</strong>
               								(Integer)
               								
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>索引值相关的选择器 (<code>:eq()</code>, <code>:lt()</code>, <code>:gt()</code>, <code>:even</code>, <code>:odd</code>)，会在前面提供的选择器筛选出的元素基础上再进行筛选。进一步筛选的依据就是这个元素在原先匹配集合中的顺序。举例来说，如果一开始通过 class 选择器 (<code>.myclass</code>) 选中了 4 个元素，然后这四个元素的索引值会被分配为 <code>0</code> 到 <code>3</code>，之后就可以用这种索引值选择器来进一步筛选了。
         </p>
         
         <p>注意，由于 JavaScript 数组的索引值是从 0 开始计数的，所以这些选择器也是以 0 开始计数的。例如，<code>$('.myclass:eq(1)')</code> 就能选中文档中 class 是 <code>myclass</code> 的第二个元素，而不是第一个元素。相反，<code>:nth-child(n)</code> 中的 n 是从 1 开始计数的，因为 CSS 规范里是这么设定的。
         </p>
         
         <p>不像 <code><a href="eq.htm">
                  .eq(index)</a></code>
            方法, <code>:eq(index)</code> 选择器中的 <code>index</code> <em>不</em>接受负的索引值。例如，<code>$('li').eq(-1)</code> 会选中最后一个 <code>li</code> 元素,而 <code>$('li:eq(-1)')</code> 则什么都选不到。
         </p>
         
      </div>
      <h3 id="notes-0">补充说明:</h3>
      <div class="longdesc">
         <ul>
            <li>由于 <code>:eq()</code> 是 jQuery 扩展出来的，它并不是 CSS 规范中的一部分。当使用 <code>:eq()</code> 时，并不会比使用原生的 DOM 方法 <code>querySelectorAll()</code> 性能好。为了在主流浏览器中得到更好的性能，请使用 <code>$("your-pure-css-selector").eq(index)</code> 方法来代替。
            </li>
         </ul>
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>查找第三个 td。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  div { width:60px; height:60px; margin:10px; float:left;
        border:2px solid blue; }
  .blue { background:blue; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;

  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;script&gt;



    $("body").find("div").eq(2).addClass("blue");


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe></div>
</div>