<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:Map</span>jQuery.browser
   </h2>
   <div class="desc">
      <p>通过 navigator.userAgent 取得的，包含 useragent 的标识。 <strong>我们不建议使用该属性判断所使用的浏览器类型。请尝试使用功能检测的方式来代替此属性 (详见 jQuery.support)。在今后发布的 jQuery 中，jQuery.browser 可能会被移到插件中。</strong> 
         
      </p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>jQuery.browser
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>$.browser</code> 属性提供了当前访问页面的浏览器的信息，该信息是由浏览器自己提供的。它包括了以下四个最流行的浏览器类型，分别是(Internet Explorer, Mozilla, Webkit, 和 Opera)，同时还包括了浏览器的版本信息。
         </p>
         
         
         <p>有效的标识如下：</p>
         
         <ul>
            
            <li>webkit (从 jQuery 1.4 开始)</li>
            
            <li>safari (不建议使用)</li>
            
            <li>opera</li>
            
            <li>msie</li>
            
            <li>mozilla</li>
            
         </ul>
         
         
         <p>该属性会立刻生效。因此可以安全的使用它来判断是否应该调用 <code>$(document).ready()</code>。从 jQuery 1.3 开始就不再建议使用 <code>$.browser</code> 属性了，在今后发布的 jQuery 中，该功能可能会被移到插件中。
         </p>
         
         
         <p>由于 <code>$.browser</code> 使用了 <code>navigator.userAgent</code> 来判断平台，因此使它显得很脆弱，因为用户可以通过技术手段来修改该值，从而欺骗浏览器，或者由于浏览器误报，都使该属性显得很脆弱。避免该问题的最好办法就是使用 <code>
               <a href="jQuery.support.htm">$.support</a>
               </code> 属性来检测特定的功能在当前使用的该浏览器中是否有效，而不是依赖 <code>$.browser</code>。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>显示浏览器信息。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:green; font-weight:bolder; margin:3px 0 0 10px; }
  div { color:blue; margin-left:20px; font-size:14px; }
  span { color:red; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;p&gt;Browser info:&lt;/p&gt;


&lt;script&gt;


    jQuery.each(jQuery.browser, function(i, val) {
      $("&lt;div&gt;" + i + " : &lt;span&gt;" + val + "&lt;/span&gt;")
                .appendTo( document.body );
    });

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>如果当前使用的浏览器是 Microsoft 的 Internet Explorer，那么下面的语句会返回 true。</p>
      <h5>jQuery 代码:</h5><pre><code>
  $.browser.msie;
</code></pre><h3>示例:</h3>
      <p>若使用的是 WebKit 的浏览器，则弹出提示框 "this is WebKit!"。</p>
      <h5>jQuery 代码:</h5><pre><code>
  if ($.browser.webkit) {
    alert( "this is webkit!" );
  }
</code></pre><h3>示例:</h3>
      <p>如果使用的是 Firefox 3，则弹出提示框 "Do stuff for Firefox 3"。</p>
      <h5>jQuery 代码:</h5><pre><code>
  var ua = $.browser;
  if ( ua.mozilla &amp;&amp; ua.version.slice(0,3) == "1.9" ) {
    alert( "Do stuff for firefox 3" );
  }
</code></pre><h3>示例:</h3>
      <p>为不同的浏览器设置不同的 CSS 属性。</p>
      <h5>jQuery 代码:</h5><pre><code>
 if ( $.browser.msie ) {
    $("#div ul li").css( "display","inline" );
 } else {
    $("#div ul li").css( "display","inline-table" );
 }
</code></pre></div>
</div>