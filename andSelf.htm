<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>andSelf()<br></h2>
   <div class="desc">
      <p>将前一个元素集合插入到当前集合的栈顶。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.2 新增</span>andSelf()
               								
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>正如在 <code>
               <a href="end.htm">.end()</a>
               </code> 中讨论过的，jQuery 对象会维护一个内部栈，用来持续跟踪匹配元素的变化。当调用了 DOM 遍历的方法，新的元素集合会被压入栈顶。如果同样需要之前的元素集合，那么 <code>.andSelf()</code> 一定会派上用场的。
         </p>
         
         <p>例如，在页面中有如下一个简单的列表：</p>
         <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
         <p>如下代码的结果是，第 3, 4， 5 列表项的背景变成了红色：</p>
         <pre>$('li.third-item').nextAll().andSelf()
  .css('background-color', 'red');
</pre>
         <p>首先，初始选择器定位到第 3 项列表项，并使用该列表项初始化栈。然后调用 <code>.nextAll()</code> 后，第 4 和 第 5 项列表项被压入栈顶。最后，调用 <code>.andSelf()</code> 时，将这两个集合合并到一起，创建了一个 jQuery 对象，指向了这三个列表项，其顺序是按照这三个列表项在文档中的顺序，即：<code>{[&lt;li.third-item&gt;,&lt;li&gt;,&lt;li&gt; ]}</code>。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>查找所有的 div，及包含在它们中间的段落，并且为它们添加样式。注意，div 并没有黄色的背景色，因为它并没有使用 .andSelf()。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p, div { margin:5px; padding:5px; }
  .border { border: 2px solid red; }
  .background { background:yellow; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div&gt;
    &lt;p&gt;First Paragraph&lt;/p&gt;
    &lt;p&gt;Second Paragraph&lt;/p&gt;
  &lt;/div&gt;

&lt;script&gt;


    $("div").find("p").andSelf().addClass("border");
    $("div").find("p").addClass("background");



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe></div>
</div>