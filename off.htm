<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>off(events, <em class="optional">[selector]</em>, <em class="optional">[handler(eventObject)]</em>)<br></h2>
   <div class="desc">
      <p>Remove an event handler.</p>
      <ul class="signatures">
         <li>
            <h4><span>1.7 新增</span>off(events, <em class="optional">[selector]</em>, <em class="optional">[handler(eventObject)]</em>)
               								
            </h4>
            <div class="arguement"><strong>events</strong>
               								(String)
               								One or more space-separated event types and optional namespaces, or just namespaces, such as "click", "keydown.myPlugin",
               or ".myPlugin".
            </div>
            <div class="arguement"><strong>selector</strong>
               								(String)
               								 可选参数，A selector which should match the one originally passed to <code>.on()</code> when attaching event handlers.
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								 可选参数，A handler function previously attached for the event(s), or the special value <code>false</code>.
            </div>
         </li>
         <li>
            <h4><span>1.7 新增</span>off(events-map, <em class="optional">[selector]</em>)
               								
            </h4>
            <div class="arguement"><strong>events-map</strong>
               								(Map)
               								A map where the string keys represent one or more space-separated event types and optional namespaces, and the values represent
               handler functions previously attached for the event(s).
            </div>
            <div class="arguement"><strong>selector</strong>
               								(String)
               								 可选参数，A selector which should match the one originally passed to <code>.on()</code> when attaching event handlers.
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>off()</code> method removes event handlers that were attached with <code><a href="http://api.jquery.com/on">
                  .on()</a></code>
            . See the discussion of delegated and directly bound events on that page for more information. Specific event handlers can
            be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. <strong>When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.</strong>
            
         </p>
         
         
         <p>If a simple event name such as <code>"click"</code> is provided, <em>all</em> events of that type (both direct and delegated) are removed from the elements in the jQuery set. When writing code that will
            be used as a plugin, or simply when working with a large code base, best practice is to attach and remove events using namespaces
            so that the code will not inadvertently remove event handlers attached by other code. All events of all types in a specific
            namespace can be removed from an element by providing just a namespace, such as <code>".myPlugin"</code>. At minimum, either a namespace or event name must be provided.
         </p>
         
         
         <p>To remove specific delegated event handlers, provide a <code>selector</code> argument. The selector string must exactly match the one passed to <code>.on()</code> when the event handler was attached. To remove all delegated events from an element without removing non-delegated events,
            use the special value <code>"**"</code>.
         </p>
         
         
         <p>A handler can also be removed by specifying the function name in the <code>handler</code> argument. When jQuery attaches an event handler, it assigns a unique id to the handler function. Handlers proxied by <code><a href="http://api.jquery.com/jQuery.proxy">
                  jQuery.proxy()</a></code>
            or a similar mechanism will all have the same unique id (the proxy function), so passing proxied handlers to <code>.off</code> may remove more handlers than intended. In those situations it is better to attach and remove event handlers using namespaces.
         </p>
         
         
         <p>As with <code>.on()</code>, you can pass an <code>events-map</code> argument instead of specifying the <code>events</code> 和 <code>handler</code> as separate arguments. The keys are events and/or namespaces; the values are handler functions or the special value <code>false</code>.
         </p>
         
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>Add and remove event handlers on the colored button.</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
button { margin:5px; }
button#theone { color:red; background:yellow; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Add Click&lt;/button&gt;
&lt;button id="unbind"&gt;Remove Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;

&lt;script&gt;


function aClick() {
  $("div").show().fadeOut("slow");
}
$("#bind").click(function () {
  $("body").on("click", "#theone", aClick)
    .find("#theone").text("Can Click!");
});
$("#unbind").click(function () {
  $("body").off("click", "#theone", aClick)
    .find("#theone").text("Does nothing...");
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>Remove all event handlers from all paragraphs:</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").off()</code></pre><h3>示例:</h3>
      <p>Remove all delegated click handlers from all paragraphs:</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").off( "click", "**" )</code></pre><h3>示例:</h3>
      <p>Remove just one previously bound handler by passing it as the third argument:</p>
      <h5>jQuery 代码:</h5><pre><code>var foo = function () {
  // code to handle some kind of event
};

// ... now foo will be called when paragraphs are clicked ...
$("body").on("click", "p", foo);


// ... foo will no longer be called.
$("body").off("click", "p", foo); </code></pre><h3>示例:</h3>
      <p>Unbind all delegated event handlers by their namespace:</p>
      <h5>jQuery 代码:</h5><pre><code>var validate = function () {
  // code to validate form entries
};

// delegate events under the ".validator" namespace
$("form").on("click.validator", "button", validate);

$("form").on("keypress.validator", "input[type='text']", validate); 

// remove event handlers in the ".validator" namespace

$("form").off(".validator");</code></pre></div>
</div>