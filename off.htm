<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>off(events, <em class="optional">[selector]</em>, <em class="optional">[handler(eventObject)]</em>)<br></h2>
   <div class="desc">
      <p>移除事件处理函数。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.7 新增</span>off(events, <em class="optional">[selector]</em>, <em class="optional">[handler(eventObject)]</em>)
               								
            </h4>
            <div class="arguement"><strong>events</strong>
               								(String)
               								一个或多个由空格分隔的事件类型及可选的名字空间，或者仅有名字空间。例如，"click"， "keydown.myPlugin"， 或 ".myPlugin"。
            </div>
            <div class="arguement"><strong>selector</strong>
               								(String)
               								 可选参数，与之前通过 <code>.on()</code> 进行绑定事件处理时相一致的选择器。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								 可选参数，之前为事件绑定的处理函数，或者是特殊值 <code>false</code>。
            </div>
         </li>
         <li>
            <h4><span>1.7 新增</span>off(events-map, <em class="optional">[selector]</em>)
               								
            </h4>
            <div class="arguement"><strong>events-map</strong>
               								(Map)
               								一个映射，键是由一个或多个由空格分隔的事件类型及可选的名字空间，值是先前为该事件绑定的处理函数。
            </div>
            <div class="arguement"><strong>selector</strong>
               								(String)
               								 可选参数，与之前通过 <code>.on()</code> 进行绑定事件处理时相一致的选择器。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>off()</code> 方法会移除通过 <code><a href="on.htm">
                  .on()</a></code> 绑定的事件处理函数。了解更多信息，请查看在 <code><a href="on.htm">.on()</a></code> 方法中关于代理事件及直接事件的相关讨论。可以通过提供组合的事件名，名字空间，选择器或处理函数来移除绑定在元素上指定的事件处理函数。<strong>当提供了多个过滤参数时，只有与这些参数完全匹配的事件处理函数才会被移除。</strong>
            
         </p>
         
         
         <p>如果只简单的提供了诸如 <code>"click"</code> 这样的事件名，那么元素上<em>所有</em>该类型的事件(无论是直接事件还是代理事件)都会被移除。对于写插件，或者基于大型代码而编程时，最好是通过名字空间进行事件绑定或移除操作，这样就不会意外的移除其它代码添加的事件处理函数。可以通过名字空间，例如，<code>".myPlugin"</code> 来移除元素上所有与指定名字空间相匹配的事件，无论它是什么类型的事件。在移除事件处理时，至少要提供名字空间或事件名。
         </p>
         
         
         <p>若要移除指定的代理事件，需要提供 <code>selector</code> 参数。该选择器字符串必须与之前通过 <code>.on()</code> 进行事件处理绑定时使用的选择器相一致。若要移除元素上所有的代理事件，而不移除任何非代理事件，请使用特殊值 <code>"**"</code>。
         </p>
         
         
         <p>同样可以通过在 <code>handler</code> 参数中指定函数名来移除对应的事件处理。当 jQuery 绑定一个事件处理时，jQuery 会为该事件处理赋予一个独一无二的 id 值。通过 <code><a href="jQuery.proxy.htm">
                  jQuery.proxy()</a></code>
            进行的事件代理，或类似的机制会使用这个 id(proxy 函数)，因此若向 <code>.off</code> 中传入了代理的事件处理函数，移除的处理函数可以会比预计的多。在这种情况下，最好是使用名字空间进行事件的绑定和移除。
         </p>
         
         
         <p>与 <code>.on()</code> 一样，您可以传入一个 <code>events-map</code> 参数来取代 <code>events</code> 和 <code>handler</code> 参数。键是事件类型及可选的名字空间，值是绑定的处理函数，或者是特殊值 <code>false</code>。
         </p>
         
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>为有颜色的按钮添加并移除事件处理。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
button { margin:5px; }
button#theone { color:red; background:yellow; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Add Click&lt;/button&gt;
&lt;button id="unbind"&gt;Remove Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;

&lt;script&gt;


function aClick() {
  $("div").show().fadeOut("slow");
}
$("#bind").click(function () {
  $("body").on("click", "#theone", aClick)
    .find("#theone").text("Can Click!");
});
$("#unbind").click(function () {
  $("body").off("click", "#theone", aClick)
    .find("#theone").text("Does nothing...");
});


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>移除所有段落上的事件：</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").off()</code></pre><h3>示例:</h3>
      <p>移除所有段落上的代理事件：</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").off( "click", "**" )</code></pre><h3>示例:</h3>
      <p>通过传入的第三个参数，仅移除先前绑定的事件处理函数：</p>
      <h5>jQuery 代码:</h5><pre><code>var foo = function () {
  // code to handle some kind of event
};

// ... now foo will be called when paragraphs are clicked ...
$("body").on("click", "p", foo);


// ... foo will no longer be called.
$("body").off("click", "p", foo); </code></pre><h3>示例:</h3>
      <p>通过指定名字空间，解除绑定表单上所有的代理事件：</p>
      <h5>jQuery 代码:</h5><pre><code>var validate = function () {
  // code to validate form entries
};

// delegate events under the ".validator" namespace
$("form").on("click.validator", "button", validate);

$("form").on("keypress.validator", "input[type='text']", validate); 

// remove event handlers in the ".validator" namespace

$("form").off(".validator");</code></pre></div>
</div>