<!DOCTYPE HTML>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>one(events, <em class="optional">[data]</em>, handler(eventObject))<br></h2>
   <div class="desc">
      <p>为元素的事件添加处理函数。该处理函数最多在每个满足条件的元素执行一次。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.1 新增</span>one(events, <em class="optional">[data]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>events</strong>
               								(String)
               								字符串，包含一个或多个 JavaScript 事件类型，例如 "click"， "submit" 或自定义事件名。
            </div>
            <div class="arguement"><strong>data</strong>
               								(Object)
               								 可选参数，将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.7 新增</span>one(events, <em class="optional">[selector]</em>, <em class="optional">[data]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>events</strong>
               								(String)
               								一个或多个由空格分隔的事件类型及可选的名字空间，例如："click" 或 "keydown.myPlugin"。
            </div>
            <div class="arguement"><strong>selector</strong>
               								(String)
               								 可选参数，一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 <code>null</code> 或者忽略了该选择器，那么被选中的元素总是能触发事件。
            </div>
            <div class="arguement"><strong>data</strong>
               								(Anything)
               								 可选参数，当事件触发时，将要传入事件处理函数中的 <code><a href="event.data.htm">
                     event.data</a></code>
               的数据。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								当事件被触发时，执行的函数。若该函数只是要执行 <code>return false</code> 的话，该参数位置可以直接简写成 <code>false</code>。
            </div>
         </li>
         <li>
            <h4><span>1.7 新增</span>one(events-map, <em class="optional">[selector]</em>, <em class="optional">[data]</em>)
               								
            </h4>
            <div class="arguement"><strong>events-map</strong>
               								(Map)
               								 一个映射，键是由一个或多个由空格分隔的事件类型及可选的名字空间，值是这些事件类型所对应的事件处理函数。
            </div>
            <div class="arguement"><strong>selector</strong>
               								(String)
               								 可选参数，一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件。
            </div>
            <div class="arguement"><strong>data</strong>
               								(Anything)
               								 可选参数，当事件触发时，将要传入事件处理函数中的 <code><a href="event.data.htm">
                     event.data</a></code>
               的数据。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>one(events, [data], handler(eventObject)) 这种用法和 <code>.bind()</code> 是一样的，不同之处在于，该处理函数在第一次被调用之后便会解除事件绑定。one(events, [selector], [data], handler(eventObject)) 这种用法是 jQuery 1.7 中添加的，它和 <code>.on()</code> 是一样的，不同之处在于，当满足选择器的被代理元素上的处理函数第一次被调用之后，便会解除事件绑定。例如：
         </p>
         <pre>$("#foo").one("click", function() {
  alert("This will be displayed only once.");
});
$("body").one("click", ".foo", function() {
  alert("This displays once for the first .foo clicked in the body.");
});
</pre>
         <p>上述代码代码执行完之后，若在 ID 为 <code>foo</code> 的元素上发生的点击事件，那么就会显示提示框。之后再在该元素上点击时，就不会再触发该事件。上述代码等价于：
         </p>
         <pre>$("#foo").bind("click", function( event ) {
  alert("This will be displayed only once.");
  $(this).unbind( event );
});
</pre>
         <p>换句话说，在一个普通的事件绑定处理函数中，显式的调用 <code>.unbind()</code> 和该方法的作用是一样的。
         </p>
         
         <p>如果该方法的第一个参数包含多个用空格分隔的事件类型的话，那么<em>每种类型的事件被触发时，处理函数仅会被调用一次</em>。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>为每个 div 绑定一次性 click 事件。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div { width:60px; height:60px; margin:5px; float:left;
background:green; border:10px outset; 
cursor:pointer; }
p { color:red; margin:0; clear:left; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;p&gt;Click a green square...&lt;/p&gt;


&lt;script&gt;


var n = 0;
$("div").one("click", function() {
  var index = $("div").index(this);
  $(this).css({ 
    borderStyle:"inset",
    cursor:"auto"
  });
  $("p").text("Div at index #" + index + " clicked." +
      "  That's " + ++n + " total clicks.");
});



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>在每个段落上第一次点击时，显示该段落的内容：</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").one("click", function(){
alert( $(this).text() );
});</code></pre></div>
</div>