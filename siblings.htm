<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>siblings(<em class="optional">[selector]</em>)<br></h2>
   <div class="desc">
      <p>查找匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>siblings(<em class="optional">[selector]</em>)
               								
            </h4>
            <div class="arguement"><strong>selector</strong>
               								(Selector)
               								 可选参数，用于匹配元素的选择器表达式字符串。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>若一个 jQuery 对象代表了一个 DOM 元素集合，<code>.siblings()</code> 方法允许我们在 DOM 树中查找集合中这些元素的兄弟元素，并根据匹配的元素创建一个新的 jQuery 对象。
         </p>
         
         <p>该方法还可以接受一个可选的选择器表达式，该选择器表达式可以是任何可传给 <code>$()</code> 函数的选择器表达式。如果提供了选择器表达式，那么会先测试该元素是否满足匹配的选择器表达式。
         </p>
         
         <p>例如，在页面中有如下一个简单的列表：</p>
         <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
         <p>如果我们从 item 3 开始，我们可以向下面这样，查找它的兄弟元素：</p>
         <pre>$('li.third-item').siblings().css('background-color', 'red');</pre>
         <p>其结果是 item 1, item 2, item 4, 和 item 5 的背景色变成了红色。由于我们没有提供选择器表达式，因此所有的兄弟元素都是结果对象中的一部分。如果我们提供了选择器，那么只有上述四个列表项中，满足选择器的元素才会被包含在结果对象中。</p>
         
         <p>原始元素并不会包含在结果对象中，要特别注意这一点，尤其是我们希望查找 DOM 中，在特殊层次上的所有元素时。</p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>查找 3 个列表中，所有黄色 li 元素的独一无二的的兄弟元素 (如果条件适当的话，还包括其它黄色 li 元素)。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  ul { float:left; margin:5px; font-size:16px; font-weight:bold; }
  p { color:blue; margin:10px 20px; font-size:16px; padding:5px; 
      font-weight:bolder; }
  .hilite { background:yellow; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
    &lt;li&gt;One&lt;/li&gt;

    &lt;li&gt;Two&lt;/li&gt;
    &lt;li class="hilite"&gt;Three&lt;/li&gt;
    &lt;li&gt;Four&lt;/li&gt;
  &lt;/ul&gt;

  &lt;ul&gt;
    &lt;li&gt;Five&lt;/li&gt;
    &lt;li&gt;Six&lt;/li&gt;
    &lt;li&gt;Seven&lt;/li&gt;

  &lt;/ul&gt;
  &lt;ul&gt;
    &lt;li&gt;Eight&lt;/li&gt;
    &lt;li class="hilite"&gt;Nine&lt;/li&gt;

    &lt;li&gt;Ten&lt;/li&gt;
    &lt;li class="hilite"&gt;Eleven&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;Unique siblings: &lt;b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;script&gt;



    var len = $(".hilite").siblings()
                          .css("color", "red")
                          .length;
    $("b").text(len);


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>查找每个含有 "selected" 样式的 div 的所有兄弟元素。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/div&gt;

  &lt;p class="selected"&gt;Hello Again&lt;/p&gt;
  &lt;p&gt;And Again&lt;/p&gt;

&lt;script&gt;

$("p").siblings(".selected").css("background", "yellow");

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe></div>
</div>