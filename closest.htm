<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>closest(selector)<br></h2>
   <div class="desc">
      <p>取得与选择器相匹配的第一个元素，从当前元素开始，在 DOM 树中向上查找。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.3 新增</span>closest(selector)
               								
            </h4>
            <div class="arguement"><strong>selector</strong>
               								(Selector)
               								用于匹配元素的选择器表达式字符串。
            </div>
         </li>
         <li>
            <h4><span>1.4 新增</span>closest(selector, <em class="optional">[context]</em>)
               								
            </h4>
            <div class="arguement"><strong>selector</strong>
               								(Selector)
               								用于匹配元素的选择器表达式字符串。
            </div>
            <div class="arguement"><strong>context</strong>
               								(Element)
               								 可选参数，用于查找可能匹配到的 DOM 元素。如果不提供 context 参数，那么会使用 jQuery 集合的 context。
            </div>
         </li>
         <li>
            <h4><span>1.6 新增</span>closest(jQuery object)
               								
            </h4>
            <div class="arguement"><strong>jQuery object</strong>
               								(jQuery)
               								用于查找匹配的 jQuery 对象。
            </div>
         </li>
         <li>
            <h4><span>1.6 新增</span>closest(element)
               								
            </h4>
            <div class="arguement"><strong>element</strong>
               								(Element)
               								用于查找匹配的元素。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>若一个 jQuery 对象代表了一个 DOM 元素集合，<code>.closest()</code> 方法会在 DOM 树中查找这些元素和它们的祖先元素，并根据匹配到的元素构建一个新的 jQuery 对象。<code>.parents()</code> 和 <code>.closest()</code> 方法很类似，它们都是在 DOM 树中向上遍历。虽然它们之间的区别很微妙，但是却很重要：
         </p>
         
         
         <table>
            
            <thead>
               
               <tr>
                  
                  <th>.closest()</th>
                  
                  <th>.parents()</th>
                  
               </tr>
               
            </thead>
            
            <tbody>
               
               <tr>
                  
                  <td>从当前元素开始查找</td>
                  
                  <td>从父元素开始查找</td>
                  
               </tr>
               
               <tr>
                  
                  <td>在 DOM 树中向上遍历，直到找到了与提供的选择器相匹配的元素</td>
                  
                  <td>在 DOM 树中向上遍历，直至文件的根元素，将每个祖先元素添加到一个临时的集合中，若提供了选择器，则会使用该选择器在集合中进行过滤</td>
                  
               </tr>
               
               <tr>
                  
                  <td>返回包括 0 个或 1 个 元素的 jQuery 对象</td>
                  
                  <td>返回包括 0 个， 1 个 或多个元素的 jQuery 对象</td>
                  
               </tr>
               
            </tbody>
            
         </table>
         
         <pre>
&lt;ul id="one" class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li id="ii" class="item-ii"&gt;II
  &lt;ul class="level-2"&gt;
    &lt;li class="item-a"&gt;A&lt;/li&gt;
    &lt;li class="item-b"&gt;B
      &lt;ul class="level-3"&gt;
        &lt;li class="item-1"&gt;1&lt;/li&gt;
        &lt;li class="item-2"&gt;2&lt;/li&gt;
        &lt;li class="item-3"&gt;3&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li class="item-c"&gt;C&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
         
         <p>假如我们从列表项 A 开始，查找 <code>&lt;ul&gt;</code> 元素：
         </p>
         <pre>
$('li.item-a').closest('ul')
  .css('background-color', 'red');
</pre>
         <p>其结果是改变了 level-2 <code>&lt;ul&gt;</code> 的颜色，因为在 DOM 中向上遍历时，它是第一个匹配的元素。
         </p>
         
         <p>例如这一次我们要查找 <code>&lt;li&gt;</code> 元素：
         </p>
         <pre>$('li.item-a').closest('li')
  .css('background-color', 'red');
</pre>
         <p>其结果是改变了列表项 A 的元素。<code>.closest()</code> 方法是从<em>自身元素</em>开始查找的，然后在 DOM 树中向上遍历，直到找到了所提供的表达式列表项 A。
         </p>
         
         <p>我们可以指定一个 DOM 元素作为 context 来限定查找元素的范围。</p>
         <pre>var listItemII = document.getElementById('ii');
$('li.item-a').closest('ul', listItemII)
  .css('background-color', 'red');
$('li.item-a').closest('#one', listItemII)
  .css('background-color', 'green');</pre>
         <p>上述代码的结果会改变 level-2 <code>&lt;ul&gt;</code> 的颜色，因为它既是列表项 A 的第一个 <code>&lt;ul&gt;</code> 祖先元素也是列表项 II 的后代元素。但是并不会改变 level-1 <code>&lt;ul&gt;</code> 的元素，因为它不是列表项 II 的后代元素。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>该例子展示了如何在事件代理中应用 closest。当点击列表项时，会切换显示列表项的背景色，使其变为黄色。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  li { margin: 3px; padding: 3px; background: #EEEEEE; }
  li.hilight { background: yellow; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;script&gt;


  $( document ).bind("click", function( e ) {
    $( e.target ).closest("li").toggleClass("hilight");
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>将一个 jQuery 对象传入 closest 中。当点击列表项时，会切换显示列表项的背景色，使其变为黄色。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  li { margin: 3px; padding: 3px; background: #EEEEEE; }
  li.hilight { background: yellow; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;script&gt;


  var $listElements = $("li").css("color", "blue");
  $( document ).bind("click", function( e ) {
    $( e.target ).closest( $listElements ).toggleClass("hilight");
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:Array</span>closest(selectors, <em class="optional">[context]</em>)<br></h2>
   <div class="desc">
      <p>以数组的形式返回与选择器相匹配的所有元素，从当前元素开始，在 DOM 树中向上遍历。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.4 新增</span>closest(selectors, <em class="optional">[context]</em>)
               								
            </h4>
            <div class="arguement"><strong>selectors</strong>
               								(Array)
               								选择器表达式数组或字符串，用于查找匹配的元素（也可以是 jQuery 对象）。
            </div>
            <div class="arguement"><strong>context</strong>
               								(Element)
               								 可选参数，用于查找可能匹配到的 DOM 元素。如果不提供 context 参数，那么会使用 jQuery 集合的 context。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><strong>从 jQuery 1.7 开始，不再建议使用该方法，但是 jQuery 1.7 之前仍然可以使用。</strong>该方法将主要用于 jQuery 内部或插件作者使用。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>该例子展示了如何在事件代理中应用 closest。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;script&gt;


  var close = $("li:first").closest(["ul", "body"]);
  $.each(close, function(i){
  $("li").eq(i).html( this.selector + ": " + this.elem.nodeName );
  });

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>