<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>mouseenter(handler(eventObject))<br></h2>
   <div class="desc">
      <p>绑定一个事件，该事件在鼠标移入到元素上时被触发。或者触发元素上的该事件。（不支持事件冒泡）</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>mouseenter(handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>mouseenter(<em class="optional">[eventData]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>eventData</strong>
               								(Object)
               								 可选参数，将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>mouseenter()
               								
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>带有参数的该方法是 <code>.bind('mouseenter', handler)</code> 的快捷方式，不带参数的该方法是 <code>.trigger('mouseenter')</code> 的快捷方式。
         </p>
         
         <p><code>mouseenter</code> JavaScript 事件是 IE 特有的事件。由于该事件通常很有用，所以 jQuery 模拟了这个事件，以便在其它浏览器中也可以使用。该事件在鼠标移入到元素上时被触发。任何 HTML 元素都可以接收该事件。
         </p>
         
         <p>举例来说，请看下面的HTML：</p>
         <pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre>
         
         <p class="image">
            <img src="images/0042_05_08.png" alt="">
            
         </p>
         
         <p>该事件可以绑定在任何元素上：</p>
         <pre>$('#outer').mouseenter(function() {
  $('#log').append('&lt;div&gt;Handler for .mouseenter() called.&lt;/div&gt;');
});</pre>
         <p>现在，当鼠标指针移入 <span class="output">Outer</span> 
            <code>&lt;div&gt;</code> 时，就会向 <code>&lt;div id="log"&gt;</code> 中追加信息。我们也可以通过点击其它元素，手动触发另一个元素上的该事件： 
         </p>
         <pre>$('#other').click(function() {
  $('#outer').mouseenter();
});</pre>
         <p>在代码执行后，如果你点击 <span class="output">Trigger the handler</span> 将同样会追加上面的消息。
         </p>
         
         <p><code>mouseenter</code> 事件与 <code>mouseover</code> 不同之处在事件冒泡上。<code>mouseenter</code> 事件不会进行事件冒泡，而 <code>mouseover</code> 则会事件冒泡。如果上例中使用的是 <code>mouseover</code>，那么当鼠标移到 <span class="output">Inner</span> 元素上时，该事件也会被触发，但通常这不是我们想要的结果。另一方面，<code>mouseenter</code> 事件只会在绑定它的元素上被调用，而不会在后代节点上被触发。所以，在上面的例子中，当鼠标移到 <span class="output">Outer</span> 元素时，该事件才会被触发，但是将鼠标移到 <span class="output">Inner</span> 元素上时，该事件是不会被触发的。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>当触发 mouseenter 和 mouseout 事件时，显示一段文字。当鼠标移动到绑定
         mouseover 事件元素的子元素上时，mouseover 事件同样会被触发。但是，只有在绑定 mouseenter 事件的元素上，才会触发该事件。
      </p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div.out {
width:40%;
height:120px;
margin:0 15px;
background-color:#D6EDFC;
float:left;
}
div.in {
width:60%;
height:60%;
background-color:#FFCC00;
margin:10px auto;
}
p {
line-height:1em;
margin:0;
padding:0;
}
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;div class="out overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;

&lt;div class="out enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;



&lt;script&gt;


    var i = 0;
    $("div.overout").mouseover(function(){
      $("p:first",this).text("mouse over");
      $("p:last",this).text(++i);
    }).mouseout(function(){
      $("p:first",this).text("mouse out");
    });

    var n = 0;
    $("div.enterleave").mouseenter(function(){
      $("p:first",this).text("mouse enter");
      $("p:last",this).text(++n);
    }).mouseleave(function(){
      $("p:first",this).text("mouse leave");
    });



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>