<!DOCTYPE HTML>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
		
			(function(){
				$("#go_home").stop(true);
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
				$(window).on("hashchange", function() { 
					var previousUrl = location.href;
					var isAPIPage = previousUrl.lastIndexOf("index.html#");
					if (isAPIPage < 0){
						location.href = "index.html";
					}
				});
			})(jQuery);
		
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>keypress(handler(eventObject))<br></h2>
   <div class="desc">
      <p>为 JavaScript 的 "keypress" 事件绑定一个处理函数，或者触发元素上的该事件。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>keypress(handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>keypress(<em class="optional">[eventData]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>eventData</strong>
               								(Object)
               								 可选参数，将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>keypress()
               								
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>
            <strong>注意:</strong> 由于 <code>keypress</code> 事件没有统一的官方规范说明，所以在不同的浏览器，相同浏览器的不同版本及不同的平台上使用该事件时，其实际发生的行为可能会不一致。
         </p>
         
         <p>带有参数的该方法是 <code>.bind("keypress", handler)</code> 的快捷方式，不带参数的该方法是 <code>.trigger("keypress")</code> 的快捷方式。
         </p>
         
         <p>当在元素上有键盘输入的时候，就会触发 <code>keypress</code> 事件。该事件和 <code>keydown</code> 事件类似，不同之处在于，当按键被一直按下（即连续插入字符的场合）时的处理。如果用户按下了某键但是没有松开时，<code>keydown</code> 事件只被触发一次，但是 <code>keypress</code> 事件会在每插入一个字符时，被触发一次。此外，修饰键（例如 Shift 键) 会触发 <code>keydown</code> 事件，但是不会触发 <code>keypress</code> 事件。
         </p>
         
         <p><code>keypress</code> 事件可以添加到任何元素，但是只有可以获得焦点的元素才能触发这个事件。不同的浏览器中，可获得焦点的元素略有不同，但是表单元素总是可以获得焦点的，所以这个事件可以放心的用在这些元素上。
         </p>
         
         <p>举例来说，请看下面的HTML：</p>
         <pre>&lt;form&gt;
  &lt;fieldset&gt;
    &lt;input id="target" type="text" value="Hello there" /&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
         <p>事件处理函数可以绑定在输入框上：</p>
         <pre>$("#target").keypress(function() {
  alert("Handler for .keypress() called.");
});</pre>
         <p>现在，当插入点在这个输入框内部，按下一个按键时，会在弹出对话框中显示下面的文字：</p>
         
         <p>
            <span class="output">Handler for .keypress() called.</span>
            
         </p>
         
         <p>如果按键一直被按下，就会重复显示上述信息。我们可以调用不带参数的 <code>.keypress()</code> 方法，手动触发这个事件：
         </p>
         <pre>$('#other').click(function() {
  $("#target").keypress();
});</pre>
         <p>在代码执行后，如果你点击 <span class="output">Trigger the handler</span> 将同样会弹出上面的消息。
         </p>
         
         <p>如果需要捕获在任意位置的按键事件（例如要在页面上实现全局的快捷键），那么可以把这个事件添加到 <code>document</code> 对象上去。由于事件冒泡，所有的按键事件都会沿着各自的 DOM 树冒泡到 <code>document</code> 对象上，除非明确禁止事件冒泡。
         </p>
         
         <p>要确定哪个按键被按下了，我们可以检测传递给事件处理函数的 <code>event</code> 对象。由于不同的浏览器使用不同的属性来存储这个信息，所以 jQuery 将它们标准化成 <code>.which</code> 属性，以便我们能可靠地使用它来获取按键代码。
         </p>
         
         <p>注意，<code>keydown</code> 和 <code>keyup</code> 提供了一个代码代表是哪个键被按下了，对于 <code>keypress</code> 而言，则代表输入了哪个字符。例如，按下了小写的 "a"，在 <code>keydown</code> 和 <code>keyup</code> 中，对应该键的代码是 65，但是对于 <code>keypress</code> 而言，接收到的代码是 97。如果是大写 "A" 的话，则所有的相关事件接收到的代码都是 65。由于这个区别，若想捕获敲击了哪个特殊键的话，例如，方向键，使用 <code>.keydown()</code> 或 <code>.keyup()</code> 更好。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>在文本框中按下某个键时，显示 event 对象。注意：输出 event 对象时，要依赖一个简单的 $.print() 插件 (http://api.jquery.com/scripts/events.js)。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
fieldset { margin-bottom: 1em; }
input { display: block; margin-bottom: .25em; }
#print-output {
  width: 100%;
}
.print-output-line {
  white-space: pre;
  padding: 5px;
  font-family: monaco, monospace;
  font-size: .7em;
}

&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text" /&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script src="events.js"&gt;&lt;/script&gt;

&lt;script&gt;


var xTriggered = 0;
$("#target").keypress(function(event) {
  if ( event.which == 13 ) {
     event.preventDefault();
   }
   xTriggered++;
   var msg = "Handler for .keypress() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$("#other").click(function() {
  $("#target").keypress();
});

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="460"></iframe></div>
</div>