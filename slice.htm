<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>slice(start, <em class="optional">[end]</em>)<br></h2>
   <div class="desc">
      <p>根据指定的下标范围，过滤匹配的元素集合。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.1.4 新增</span>slice(start, <em class="optional">[end]</em>)
               								
            </h4>
            <div class="arguement"><strong>start</strong>
               								(Integer)
               								从 0 开始计数的下标。代表将要被选择的元素的起始下标。如果指定的下标是一个负数，那么代表从末尾开始计数。
            </div>
            <div class="arguement"><strong>end</strong>
               								(Integer)
               								 可选参数，从 0 开始计数的下标。代表将要被选择的元素的结束下标。如果指定的下标是一个负数，那么代表从末尾开始计数。如果忽略此参数，则选择的范围是从 start 开始，一直到最后。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>若一个 jQuery 对象代表了一个 DOM 元素集合，<code>.slice()</code> 方法会构造一个新的 jQuery 对象，用于存放筛选后的元素。所提供的 <code>start</code> 索引标识了集合中元素的起始位置，如果忽略 <code>end</code> 参数，从 <code>start</code> 开始，一直到集合中最后的元素都会被包含在结果中。
         </p>
         
         <p>例如，在页面中有如下一个简单的列表：</p>
         <pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
         <p>我们可以在列表项集合中应用此方法：</p>
         <pre>$('li').slice(2).css('background-color', 'red');</pre>
         <p>上述代码的执行结果是，第 3，4，5 项列表项的背景色变成了红色。注意，索引是从 0 开始计数的，并且代表的是 jQuery 对象中的元素位置，而不是在 DOM 树中的位置。</p>
         
         <p>end 对数允许我们进一步限制所选择的元素。例如：</p>
         <pre>$('li').slice(2, 4).css('background-color', 'red');</pre>
         <p>现在，只有第 3 和第 4 项列表项会被选中。索引依然是从 0 开始计数的，但是在被选中的元素中不包括 end 参数所指的元素。</p>
         
         <h4>负索引</h4>
         
         <p>jQuery 的 <code>.slice()</code> 方法模仿了 JavaScript 的 .slice() 方法。其中的一个功能就是允许传入负的 <code>start</code> 和 <code>end</code> 参数。如果传递的是负数，那么下标位置是从结尾开始的，而不是从起始位置开始。例如：
         </p>
         <pre>$('li').slice(-2, -1).css('background-color', 'red');</pre>
         <p>这次的执行结果是，只有第 4 项列表项的背景色变成了红色。因为它是唯一满足条件的列表项，即被选中的元素是从倒数第二个元素(<code>-2</code>)开始到最后一个元素(<code>-1</code>)（不含此元素）之间的元素。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>将随机选中的范围内的 div 变成黄色。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  div { width:40px; height:40px; margin:10px; float:left;
        border:2px solid blue; }
  span { color:red; font-weight:bold; }
  button { margin:5px; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;&lt;button&gt;Turn slice yellow&lt;/button&gt;
  &lt;span&gt;Click the button!&lt;/span&gt;&lt;/p&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;

  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;

  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;script&gt;



    function colorEm() {
      var $div = $("div");
      var start = Math.floor(Math.random() *
                             $div.length);
      var end = Math.floor(Math.random() *
                           ($div.length - start)) +
                           start + 1;
      if (end == $div.length) end = undefined;
      $div.css("background", "");
      if (end) 
        $div.slice(start, end).css("background", "yellow");   
       else
        $div.slice(start).css("background", "yellow");
      
      $("span").text('$("div").slice(' + start +
                     (end ? ', ' + end : '') +
                     ').css("background", "yellow");');
    }

    $("button").click(colorEm);



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="240"></iframe><h3>示例:</h3>
      <p>假设共有三个段落，选择所有的段落，并进行 slice 操作，选择的范围只包含第一个元素。</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").slice(0, 1).wrapInner("&lt;b&gt;&lt;/b&gt;");</code></pre><h3>示例:</h3>
      <p>假设共有三个段落，选择所有的段落，并进行 slice 操作，选择的范围只包含第一个和第二个元素。</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").slice(0, 2).wrapInner("&lt;b&gt;&lt;/b&gt;");</code></pre><h3>示例:</h3>
      <p>假设共有三个段落，选择所有的段落，并进行 slice 操作，选择的范围只包含第二个元素。</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").slice(1, 2).wrapInner("&lt;b&gt;&lt;/b&gt;");</code></pre><h3>示例:</h3>
      <p>假设共有三个段落，选择所有的段落，并进行 slice 操作，选择的范围只包含第二个和第三个元素。</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").slice(1).wrapInner("&lt;b&gt;&lt;/b&gt;");</code></pre><h3>示例:</h3>
      <p>假设共有三个段落，选择所有的段落，并进行 slice 操作，选择的范围只包含第三个元素。</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").slice(-1).wrapInner("&lt;b&gt;&lt;/b&gt;");</code></pre></div>
</div>