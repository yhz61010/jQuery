<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>after(content, <em class="optional">[content]</em>)<br></h2>
   <div class="desc">
      <p>在每个匹配元素的后面，插入指定的内容，作为其兄弟节点。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>after(content, <em class="optional">[content]</em>)
               								
            </h4>
            <div class="arguement"><strong>content</strong>
               								(String, Element, jQuery)
               								待插入的内容，可以是选择器, 元素, HTML 字符串, 或 jQuery 对象。待插入的内容将会被插入到每个匹配元素的后面。
            </div>
            <div class="arguement"><strong>content</strong>
               								(String, Element, Array, jQuery)
               								 可选参数，可选参数，表示将要插入到匹配元素后面的内容。可以是一个或多个附加的 DOM 元素, 元素数组, HTML 字符串, 或 jQuery 对象。 
            </div>
         </li>
         <li>
            <h4><span>1.4 新增</span>after(function(index))
               								
            </h4>
            <div class="arguement"><strong>function(index)</strong>
               								(Function)
               								一个函数，返回将要插入到匹配元素后面的 HTML 字符串, DOM 元素（或元素数组）, 或 jQuery 对象。index 参数表示元素在匹配集合中的位置。在函数内，<code>this</code> 指定集合中的当前元素。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p><code>.after()</code> 和 <code>
               <a href="insertAfter.htm">.insertAfter()</a>
               </code> 方法的功能是一样的。主要的区别在于语法指定（syntax-specifically）上，也就是说在调用方法时，选择的元素及指定的内容这两个参数的位置是不同的。对于 <code> .after()</code> 而言，选择器表达式写在方法的前面，待插入的内容会被插入到它的后面;将要被插入的内容作为方法的参数。而 <code>.insertAfter()</code> 正好相反，将要被插入的内容写在方法的前面（可以是选择器表达式或动态创建的标记），它会被插入到目标容器的后面。
         </p>
         
         
         <p>例如，有如下的 HTML:</p>
         <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
         
         <p>可以一次性将需要插入的内容，插入到多个元素的后面：</p>
         
         <pre>$('.inner').after('&lt;p&gt;Test&lt;/p&gt;');</pre>
         
         <p>其结果是，每个含有 inner 样式的 <code>&lt;div&gt;</code> 的后面，都被插入了新的内容：
         </p>
         
         <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/div&gt;</pre>
         
         <p>也可以选择页面上的 DOM 元素，并将其插入到另外元素的后面：</p>
         
         <pre>$('.container').after($('h2'));</pre>
         
         <p>通过这种方法将页面上选择的元素插入到其它地方，实际上是将原来的元素移动到新的位置，而不是将克隆后的元素插入到新的位置：</p>
         
         <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Greetings&lt;/h2&gt;</pre>
         <p>然而，如果目标元素（即被当成容器的元素）不只一个，那么会将克隆后的插入元素，插入到每个目标元素的后面。</p>
         
         <h4 id="disconnected-dom-nodes">插入断开的 DOM 节点（Inserting Disconnected DOM nodes，即，只有结束标签的元素）</h4>
         
         <p>从 jQuery 1.4 开始, <code>.before()</code> 和 <code>.after()</code> 可以在断开的 DOM 节点（disconnected DOM nodes，即，只有结束标签的元素）上使用。例如，有如下的代码：
         </p>
         <pre>$('&lt;div/&gt;').after('&lt;p&gt;&lt;/p&gt;');</pre>
         <p>结果是 jQuery 集合中含有一个 div，在其后还有一个段落。在它们被插入到文档之前，我们甚至还可以操作它们。</p>
         <pre>$('&lt;div/&gt;').after('&lt;p&gt;&lt;/p&gt;').addClass('foo')
  .filter('p').attr('id', 'bar').html('hello')
.end()
.appendTo('body');</pre>
         <p>上述代码执行的结果是，在 <code>&lt;/body&gt;</code> 标签之前，插入了如下元素:
         </p>
         <pre>
&lt;div class="foo"&gt;&lt;/div&gt;
&lt;p class="foo" id="bar"&gt;hello&lt;/p&gt;
</pre>
         <h4 id="passing-a-function">将函数作为参数</h4>
         
         <p>从 jQuery 1.4 开始, <code>.after()</code> 支持将一个函数作为参数，该函数返回待插入的元素。
         </p>
         <pre>$('p').after(function() {
  return '&lt;div&gt;' + this.className + '&lt;/div&gt;';
});</pre>
         <p>上面的例子将一个 <code>&lt;div&gt;</code> 插入到每个段落之后，每一个新的 <code>&lt;div&gt;</code> 含有前面段落的样式。
         </p>
         
         <h4 id="additional-arguments">额外的参数</h4>
         
         <p>和其它可添加内容的方法类似，例如  <code>
               <a href="prepend.htm">.prepend()</a>
               </code> 和 <code>
               <a href="before.htm">.before()</a>
               </code>, <code>.after()</code> 同样可以将多个内容作为参数。支持的内容包括 DOM 元素， jQuery 对象， HTML 字符串， 和 DOM 元素数组。
         </p> 
         
         <p>例如，下面的代码会在第一个段落后插入两个新的 <code>&lt;div&gt;</code> 和一个已经存在的 <code>&lt;div&gt;</code>：
         </p>
         <pre>var $newdiv1 = $('&lt;div id="object1"/&gt;'),
    newdiv2 = document.createElement('div'),
    existingdiv1 = document.getElementById('foo');

$('p').first().after($newdiv1, [newdiv2, existingdiv1]);
</pre>
         <p>因为 <code>.after()</code> 可以接收多个额外的参数，所以上面的例子中，也可以将三个独立的 <code>&lt;div&gt;</code> 分别作为参数传给该方法，就像这样： <code>$('p').first().after($newdiv1, newdiv2, existingdiv1)</code>。参数的类型和数量，将在很大程度上取决于你是如何选择元素的。
         </p>
         
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>在所有的段落后，追加一些 HTML。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;p { background:yellow; }&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;I would like to say: &lt;/p&gt;

&lt;script&gt;

$("p").after("&lt;b&gt;Hello&lt;/b&gt;");

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>在所有的段落后，追加一个元素。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;p { background:yellow; }&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;I would like to say: &lt;/p&gt;

&lt;script&gt;

$("p").after( document.createTextNode("Hello") );

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>在所有的段落后，追加一个 jQuery 对象（类似于一个 DOM 元素数组）。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;p { background:yellow; }&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt;

&lt;script&gt;

$("p").after( $("b") );

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe></div>
</div>