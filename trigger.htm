<!DOCTYPE HTML>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
		
			(function(){
				$("#go_home").stop(true);
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
				$(window).on("hashchange", function() { 
					var previousUrl = location.href;
					var isAPIPage = previousUrl.lastIndexOf("index.html#");
					if (isAPIPage < 0){
						location.href = "index.html";
					}
				});
			})(jQuery);
		
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>trigger(eventType, <em class="optional">[extraParameters]</em>)<br></h2>
   <div class="desc">
      <p>在匹配的元素上，执行指定事件类型的所有的处理函数。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>trigger(eventType, <em class="optional">[extraParameters]</em>)
               								
            </h4>
            <div class="arguement"><strong>eventType</strong>
               								(String)
               								包含 JavaScript 事件类型的字符串。例如 <code>click</code> 或 <code>submit</code>。
            </div>
            <div class="arguement"><strong>extraParameters</strong>
               								(Object)
               								 可选参数，传到事件处理函数中的额外参数。
            </div>
         </li>
         <li>
            <h4><span>1.3 新增</span>trigger(event)
               								
            </h4>
            <div class="arguement"><strong>event</strong>
               								(Event)
               								<code><a href="http://api.jquery.com/category/events/event-object/">
                     jQuery.Event</a></code>
               对象。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>当指定的事件发生时，任何通过 <code>.bind()</code> 方法或任何简写方法绑定的事件处理函数都会被触发。当然，通过 <code>.trigger()</code> 方法还可以手动调用指定的事件。若用户手动调用 <code>.trigger()</code> 后，处理函数的执行顺序和它们被注册的顺序是一样的：
         </p>
         <pre>$('#foo').bind('click', function() {
      alert($(this).text());
    });
    $('#foo').trigger('click');</pre>
         <p>从 jQuery 1.3 开始，<code>.trigger()</code> 执行的事件会在 DOM 树中向上冒泡。若在事件处理函数中返回了 <code>false</code> 或在 event 对象上调用了 <code><a href="event.stopPropagation.htm">
                  .stopPropagation()</a></code>
            方法的话，就可以防止冒泡行为的发生。尽管 <code>.trigger()</code> 模拟了事件的激活，具备合成的 event 对象，但是它并没有完美的复制自然发生的事件（naturally-occurring event）。
         </p>
         
         <p>若要触发通过 jQuery 绑定的事件处理函数，而不触发原生的事件，请使用 <code><a href="triggerHandler.htm">
                  .triggerHandler()</a></code>
            来代替。
         </p>
         
         <p>当我们使用 <code>.bind()</code> 方法定义了一个自定义事件类型时，<code>.trigger()</code> 的第二个参数就会派上用场。例如，假设我们为元素绑定了一个名叫 <code>custom</code> 的自定义事件，而不是像上面的例子中那样，绑定的是常见的内置的 <code>click</code> 事件：
         </p>
         <pre>$('#foo').bind('custom', function(event, param1, param2) {
  alert(param1 + "\n" + param2);
});
$('#foo').trigger('custom', ['Custom', 'Event']);
</pre>
         <p>event 对象始终都是事件处理函数的第一个参数，但是若在调用 <code>.trigger()</code> 时，传入了额外参数的话，这些参数也会被传入到处理函数中。若传入的参数不至一个，可以使用数组，就像上面例子中写到的那样。从 jQuery 1.6.2 开始，只传入单一参数的话，可以不使用数组。
         </p>
         
         <p>请注意向该方法中传入的 <code>extraParameters</code> 参数与传入到 <a href="bind.htm">.bind()</a> 方法中的 <code>eventData</code> 参数的区别。它们的机制都是向事件处理函数中传入信息，但是传入 <code>.trigger()</code> 中的 <code>extraParameters</code> 参数是在事件发生时传入的，而传入到 <code>.bind()</code> 中的 <code>eventData</code> 参数要求在进行事件绑定时就要事先计算好。
         </p>
         
         <p><code>.trigger()</code> 方法可以应用在包裹简单 JavaScript 对象的 jQuery 集合中，类似 pub/sub 机制(观察者机制)。当事件发生时，任何绑定在对象上的处理函数都会被触发。
         </p>
         
         <blockquote><strong>注意：</strong> 对于简单对象和 DOM 对象而言，如果被触发的事件名与对象上的属性名相匹配的话，若没有处理函数调用 <code>event.preventDefault()</code>，那么 jQuery 会尝试将其属性值作为方法来调用。如果不希望发生这样的行为，请使用 <code>.triggerHandler()</code> 来代替。
         </blockquote>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>点击 button #2 时，同时触发 button #1 的点击事件。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;

button { margin:10px; }
div { color:blue; font-weight:bold; }
span { color:red; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;button&gt;Button #1&lt;/button&gt;
&lt;button&gt;Button #2&lt;/button&gt;
&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #1 clicks.&lt;/div&gt;

&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #2 clicks.&lt;/div&gt;

&lt;script&gt;


$("button:first").click(function () {
update($("span:first"));
});
$("button:last").click(function () {
$("button:first").trigger('click');

update($("span:last"));
});

function update(j) {
var n = parseInt(j.text(), 10);
j.text(n + 1);
}


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="708" height="125"></iframe><h3>示例:</h3>
      <p>若要提交第一个表单但又不想使用 submit() 函数，请尝试如下方法：</p>
      <h5>jQuery 代码:</h5><pre><code>$("form:first").trigger("submit")</code></pre><h3>示例:</h3>
      <p>若要提交第一个表单但又不想使用 submit() 函数，请尝试如下方法：</p>
      <h5>jQuery 代码:</h5><pre><code>var event = jQuery.Event("submit");
$("form:first").trigger(event);
if ( event.isDefaultPrevented() ) {
// Perform an action...
}</code></pre><h3>示例:</h3>
      <p>向事件中传入任意的数据：</p>
      <h5>jQuery 代码:</h5><pre><code>$("p").click( function (event, a, b) {
// when a normal click fires, a and b are undefined
// for a trigger like below a refers to "foo" and b refers to "bar"

} ).trigger("click", ["foo", "bar"]);</code></pre><h3>示例:</h3>
      <p>通过 event 对象，向事件中传入任意的数据：</p>
      <h5>jQuery 代码:</h5><pre><code>var event = jQuery.Event("logged");
event.user = "foo";
event.pass = "bar";
$("body").trigger(event);</code></pre><h3>示例:</h3>
      <p>另外一种通过 event 对象传入数据的方法：</p>
      <h5>jQuery 代码:</h5><pre><code>$("body").trigger({
type:"logged",
user:"foo",
pass:"bar"

});</code></pre></div>
</div>