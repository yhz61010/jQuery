<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jqXHR</span>jQuery.get(url, <em class="optional">[data]</em>, <em class="optional">[success(data, textStatus, jqXHR)]</em>, <em class="optional">[dataType]</em>)<br></h2>
   <div class="desc">
      <p>通过 HTTP GET 方式从服务器载入数据。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>jQuery.get(url, <em class="optional">[data]</em>, <em class="optional">[success(data, textStatus, jqXHR)]</em>, <em class="optional">[dataType]</em>)
               								
            </h4>
            <div class="arguement"><strong>url</strong>
               								(String)
               								将要被请求的 URL 字符串。
            </div>
            <div class="arguement"><strong>data</strong>
               								(Map, String)
               								 可选参数，发送给服务器的字符串或者映射。
            </div>
            <div class="arguement"><strong>success(data, textStatus, jqXHR)</strong>
               								(Function)
               								 可选参数，当请求成功后执行的回调函数。
            </div>
            <div class="arguement"><strong>dataType</strong>
               								(String)
               								 可选参数，预计从服务器返回的数据类型。默认值：智能匹配 (xml, json, script, 或 html)。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>这是一个 Ajax 函数的简写形式，它等价于：</p>
         <pre>$.ajax({
  url: <em>url</em>,
  data: <em>data</em>,
  success: <em>success</em>,
  dataType: <em>dataType</em>
});
</pre>
         <p><code>success</code> 回调函数会传入返回的数据，根据响应的 MIME 类型的不同，它可能是一个 XML 根元素、文本字符串、JavaScript 文件或者 JSON 对象。同时还会传入描述响应状态的字符串。
         </p>
         
         <p>
            <strong>从 jQuery 1.5 开始</strong>, <code>success</code> 回调函数还会传入一个 <a href="http://api.jquery.com/jQuery.get/#jqxhr-object">"jqXHR" 对象</a> (在 <strong>jQuery 1.4</strong> 中, <code>success</code> 回调函数传入一个 <code>XMLHttpRequest</code> 对象)。但是,由于 JSONP 和跨域的 GET 请求不使用 <abbr title="XMLHTTPRequest">XHR</abbr>,所以，在这种情况下，传入到 <code>success</code> 回调函数中的 <code>(j)XHR</code> 和 <code>textStatus</code> 参数是 undefine。
         </p>
         
         <p>大多数情况下都会指定一个请求成功后的回调函数：</p>
         <pre>$.get('ajax/test.html', function(data) {
  $('.result').html(data);
  alert('Load was performed.');
});
</pre>
         <p>这个例子会把请求到的 HTML 代码片段插入到页面中。</p>
         
         <h4 id="jqxhr-object">jqXHR 对象</h4>
         
         <p>
            <strong>从 jQuery 1.5 开始</strong>,所有 jQuery 的 Ajax 方法都返回一个 <code>XMLHTTPRequest</code> 对象的超集。由 <code>$.get()</code> 方法返回的 jQuery XHR 对象（也可叫做 "jqXHR") 实现了 Promise 接口，使它拥有 Promise 的所有属性，方法和行为。(详见 <a href="http://api.jquery.com/category/deferred-object/">延迟对象</a> 来获得更多信息)。为了让回调函数的名字统一，便于在 <code>
               <a href="jQuery.ajax.htm">$.ajax()</a>
               </code> 里使用, jQuery XHR 对象（也可叫做 "jqXHR")同样也提供了 <code>.error()</code>, <code>.success()</code> 和 <code>.complete()</code> 方法。这些方法都带有一个参数，该参数是一个函数，此函数在 <code>$.ajax()</code> 请求结束时被调用,并且这个函数接收的参数，与调用 <code>$.ajax()</code> 函数时的参数是一致。
         </p>
         
         
         <p>Promise 接口在 jQuery 1.5 里，允许在 <code>$.get()</code> 方法后直接注册 <code>.success()</code>, <code>.complete()</code> 和 <code>.error()</code> 回调函数，甚至允许你在请求已经结束后，注册回调函数。如果该请求已经完成，则回调函数会被立刻调用。
         </p>
         <pre>// Assign handlers immediately after making the request,
  // and remember the jqxhr object for this request
  var jqxhr = $.get("example.php", function() {
    alert("success");
  })
  .success(function() { alert("second success"); })
  .error(function() { alert("error"); })
  .complete(function() { alert("complete"); });

  // perform other work here ...

  // Set another completion function for the request above
  jqxhr.complete(function(){ alert("second complete"); });</pre>
         </div>
      <h3 id="notes-0">补充说明:</h3>
      <div class="longdesc">
         <ul>
            <li>由于浏览器的安全限制，大多数 "Ajax" 请求都服从 <a title="Same Origin Policy on Wikipedia" href="http://en.wikipedia.org/wiki/Same_origin_policy">同源策略(same origin policy)</a>。即无法从不同的域，子域或协议中正确接收数据。
            </li>
            <li>如果 jQuery.get() 返回一个错误代码,除非在脚本中调用了全局的 <a href="ajaxError.htm">.ajaxError() </a> 方法，否则错误将被忽略。或者利用 jQuery 1.5 中 <code>jqXHR</code> 对象的 <code>.error()</code> 方法进行捕获，<code>jqXHR</code> 对象由 jQuery.get() 返回。
            </li>
            <li>Script 和 JSONP 请求没有同源策略(same origin policy)的限制。</li>
         </ul>
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>请求 test.php 页面，但忽略返回的结果。</p>
      <h5>jQuery 代码:</h5><pre><code>$.get("test.php");</code></pre><h3>示例:</h3>
      <p>请求 test.php 页面，并传递一些附加的数据，但依然忽略返回的结果。</p>
      <h5>jQuery 代码:</h5><pre><code>$.get("test.php", { name: "John", time: "2pm" } );</code></pre><h3>示例:</h3>
      <p>传递一个数组到服务器，继续忽略返回的结果。</p>
      <h5>jQuery 代码:</h5><pre><code>$.get("test.php", { 'choices[]': ["Jon", "Susan"]} );</code></pre><h3>示例:</h3>
      <p>显示从 test.php 请求到的结果(HTML 或者 XML，根据返回的结果而不同)。</p>
      <h5>jQuery 代码:</h5><pre><code>$.get("test.php", function(data){
alert("Data Loaded: " + data);
});</code></pre><h3>示例:</h3>
      <p>显示从 test.cgi 请求到的数据，同时传递一些数据(HTML 或者 XML，根据返回的结果而不同)。</p>
      <h5>jQuery 代码:</h5><pre><code>$.get("test.cgi", { name: "John", time: "2pm" },
   function(data){
     alert("Data Loaded: " + data);
   });</code></pre><h3>示例:</h3>
      <p>返回 test.php 的页面内容。页面内容按 json 格式被返回 (&lt;?php echo json_encode(array("name"=&gt;"John","time"=&gt;"2pm")); ?&gt;), 并将它添加到页面上。</p>
      <h5>jQuery 代码:</h5><pre><code>$.get("test.php",
   function(data){
     $('body').append( "Name: " + data.name ) // John
              .append( "Time: " + data.time ); //  2pm
   }, "json");</code></pre></div>
</div>