<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>mousemove(handler(eventObject))<br></h2>
   <div class="desc">
      <p>为 JavaScript 的 "mousemove" 事件绑定一个处理函数，或者触发元素上的该事件。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>mousemove(handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>mousemove(<em class="optional">[eventData]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>eventData</strong>
               								(Object)
               								 可选参数，将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>mousemove()
               								
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>带有参数的该方法是 <code>.bind('mousemove', handler)</code> 的快捷方式，不带参数的该方法是 <code>.trigger('mousemove')</code> 的快捷方式。
         </p>
         
         <p>当鼠标指针在元素内部移动时，就会触发 <code>mousemove</code> 事件。任何 HTML 元素都可以接收该事件。
         </p>
         
         <p>举例来说，请看下面的HTML：</p>
         <pre>&lt;div id="target"&gt;
  Move here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre>
         
         <p>可以将事件绑定到 id 为 target 的元素上：</p>
         <pre>$("#target").mousemove(function(event) {
  var msg = "Handler for .mousemove() called at ";
  msg += event.pageX + ", " + event.pageY;
  $("#log").append("&lt;div&gt;" + msg + "&lt;/div&gt;");
});</pre>
         <p>现在，当我们在 target 元素内移动鼠标时，就会向 &lt;div id="log"&gt; 中追加信息：</p>
         
         <p>
            <span class="output">Handler for .mousemove() called at (399, 48)</span>
            <br>
            <span class="output">Handler for .mousemove() called at (398, 46)</span>
            <br>
            <span class="output">Handler for .mousemove() called at (397, 44)</span>
            <br>
            <span class="output">Handler for .mousemove() called at (396, 42)</span>
            <br>
            
         </p>
         
         <p>我们可以调用不带参数的 <code>.mousemove()</code> 方法，手动触发这个事件：
         </p>
         <pre>$("#other").click(function() {
  $("#target").mousemove();
});</pre>
         <p>在执行完上述代码之后，点击 Trigger 按钮同样会追加如下信息：</p>
         
         <p>
            <span class="output">Handler for .mousemove() called at (undefined, undefined)</span>
            
         </p>
         
         <p>当追踪鼠标移动时，通常需要知道鼠标指针的实际位置。传递给该事件的 event 对象含有一些鼠标坐标信息。例如 <code>.clientX</code>, <code>.offsetX</code>, 和 <code>.pageX</code> 这些属性都是可以被使用的。不过，不同的浏览器对它们的支持情况不一样。幸运的时，jQuery 将 <code>.pageX</code> 和 <code>.pageY</code> 属性进行了标准化，以便于在所有的浏览器中都可以使用它们。这些属性提供了相对于文档左上角的鼠标指针的 X 和 Y 轴坐标。即，上例中输出显示的坐标值。
         </p>
         
         <p>牢记，只要移动了鼠标指针，哪怕是只移动了一个像素，都会触发 <code>mousemove</code> 事件。这意味着，在很短的时间内，该事件会产生很多次。如果在该事件中，存在任何重大的处理或多个处理程序，都将会产生严重的性能问题，甚至会让浏览器失去响应。因此，重要的是要尽可能的优化 <code>mousemove </code> 事件，并且当不再需要该事件时，要及时将它解除绑定。
         </p>
         
         <p>通常是在 <code>mousedown</code> 中绑定 <code>mousemove</code> 事件。并且在对应的 <code>mouseup</code> 事件中，解除绑定。要实现这一系列事件，请记住，与 <code>mousemove</code> 事件相比，<code>mouseup</code> 事件可能会被发送到不同的 HTML 元素上。由于这个原因，<code>mouseup</code> 事件通常应该绑定在更高的 DOM 树中，例如 <code>&lt;body&gt;</code>。
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>当在黄色的 div 移动鼠标时，显示鼠标指针的坐标。坐标是相对于窗口的，在该例中，窗口指的是 iframe。</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  div { width:220px; height:170px; margin: 10px 50px 10px 10px;
        background:yellow; border:2px groove; float:right; }
  p { margin:0; margin-left:10px; color:red; width:220px;
      height:120px; padding-top:70px;
      float:left; font-size:14px; }
  span { display:block; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;
    &lt;span&gt;Move the mouse over the div.&lt;/span&gt;
    &lt;span&gt;&amp;nbsp;&lt;/span&gt;
  &lt;/p&gt;

  &lt;div&gt;&lt;/div&gt;

&lt;script&gt;


    $("div").mousemove(function(e){
      var pageCoords = "( " + e.pageX + ", " + e.pageY + " )";
      var clientCoords = "( " + e.clientX + ", " + e.clientY + " )";
      $("span:first").text("( e.pageX, e.pageY ) : " + pageCoords);
      $("span:last").text("( e.clientX, e.clientY ) : " + clientCoords);
    });



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="300"></iframe></div>
</div>