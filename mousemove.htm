<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>mousemove(handler(eventObject))<br></h2>
   <div class="desc">
      <p>为 JavaScript 的 "mousemove" 事件绑定一个处理函数，或者触发元素上的该事件。</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>mousemove(handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>mousemove(<em class="optional">[eventData]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>eventData</strong>
               								(Object)
               								 可选参数，将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>mousemove()
               								
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>带有参数的该方法是 <code>.bind('mousemove', handler)</code> 的快捷方式，不带参数的该方法是 <code>.trigger('mousemove')</code> 的快捷方式。
         </p>
         
         <p><code>mousemove</code> event is sent to an element when the mouse pointer moves inside the element. 任何 HTML 元素都可以接收该事件。
         </p>
         
         <p>举例来说，请看下面的HTML：</p>
         <pre>&lt;div id="target"&gt;
  Move here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre>
         
         <p>The event handler can be bound to the target:</p>
         <pre>$("#target").mousemove(function(event) {
  var msg = "Handler for .mousemove() called at ";
  msg += event.pageX + ", " + event.pageY;
  $("#log").append("&lt;div&gt;" + msg + "&lt;/div&gt;");
});</pre>
         <p>Now when the mouse pointer moves within the target button, the messages are appended to &lt;div id="log"&gt;:</p>
         
         <p>
            <span class="output">Handler for .mousemove() called at (399, 48)</span>
            <br>
            <span class="output">Handler for .mousemove() called at (398, 46)</span>
            <br>
            <span class="output">Handler for .mousemove() called at (397, 44)</span>
            <br>
            <span class="output">Handler for .mousemove() called at (396, 42)</span>
            <br>
            
         </p>
         
         <p>我们可以调用不带参数的 <code>.mousemove()</code> 方法，手动触发这个事件：
         </p>
         <pre>$("#other").click(function() {
  $("#target").mousemove();
});</pre>
         <p>After this code executes, clicks on the Trigger button will also append the message:</p>
         
         <p>
            <span class="output">Handler for .mousemove() called at (undefined, undefined)</span>
            
         </p>
         
         <p>When tracking mouse movement, you usually need to know the actual position of the mouse pointer. The event object that is
            passed to the handler contains some information about the mouse coordinates. Properties such as <code>.clientX</code>, <code>.offsetX</code>, and <code>.pageX</code> are available, but support for them differs between browsers. Fortunately, jQuery normalizes the <code>.pageX</code> 和 <code>.pageY</code> properties so that they can be used in all browsers. These properties provide the X and Y coordinates of the mouse pointer
            relative to the top-left corner of the document, as illustrated in the example output above.
         </p>
         
         <p>Keep in mind that the <code>mousemove</code> event is triggered whenever the mouse pointer moves, even for a pixel. This means that hundreds of events can be generated
            over a very small amount of time. If the handler has to do any significant processing, or if multiple handlers for the event
            exist, this can be a serious performance drain on the browser. It is important, therefore, to optimize <code>mousemove </code>handlers as much as possible, and to unbind them as soon as they are no longer needed.
         </p>
         
         <p>A common pattern is to bind the <code>mousemove</code> handler from within a <code>mousedown</code> hander, and to unbind it from a corresponding <code>mouseup</code> handler. If implementing this sequence of events, remember that the <code>mouseup</code> event might be sent to a different HTML element than the <code>mousemove</code> event was. To account for this, the <code>mouseup</code> handler should typically be bound to an element high up in the DOM tree, such as <code>&lt;body&gt;</code>.
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in
         this case is the iframe.
      </p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  div { width:220px; height:170px; margin;10px; margin-right:50px;
        background:yellow; border:2px groove; float:right; }
  p { margin:0; margin-left:10px; color:red; width:220px;
      height:120px; padding-top:70px;
      float:left; font-size:14px; }
  span { display:block; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;   
    Try scrolling too.
    &lt;span&gt;Move the mouse over the div.&lt;/span&gt;
    &lt;span&gt;&amp;nbsp;&lt;/span&gt;
  &lt;/p&gt;

  &lt;div&gt;&lt;/div&gt;

&lt;script&gt;


    $("div").mousemove(function(e){
      var pageCoords = "( " + e.pageX + ", " + e.pageY + " )";
      var clientCoords = "( " + e.clientX + ", " + e.clientY + " )";
      $("span:first").text("( e.pageX, e.pageY ) - " + pageCoords);
      $("span:last").text("( e.clientX, e.clientY ) - " + clientCoords);
    });



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h4>演示:</h4><iframe src="blank.html" width="658" height="300"></iframe></div>
</div>