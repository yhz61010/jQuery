<!DOCTYPE HTML>
<div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" id="go_home" style="cursor: pointer;" onclick="location.href='index.html'"></div><script xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
			(function(){
				$("#go_home").stop();
				function go_home_blink() {
					$("#go_home").animate({
							opacity: 'toggle'
						}, 1000, function(){
							go_home_blink();
						});
				}
				go_home_blink();
			})(jQuery);
		</script><div xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" class="entry">
   <h2><span>返回值:jQuery</span>ajaxError(handler(event, jqXHR, ajaxSettings, thrownError))<br></h2>
   <div class="desc">
      <p>注册一个事件处理函数，这个函数会在 Ajax 请求出错时被调用。这是一个 <a href="http://docs.jquery.com/Ajax_Events">Ajax 事件</a>。
      </p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>ajaxError(handler(event, jqXHR, ajaxSettings, thrownError))
               								
            </h4>
            <div class="arguement"><strong>handler(event, jqXHR, ajaxSettings, thrownError)</strong>
               								(Function)
               								将要被调用的函数。
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>当 Ajax 请求出错时，jQuery 会触发 <code>ajaxError</code> 事件。任何先前通过 <code>.ajaxError()</code> 方法注册的事件处理函数都会在此刻被执行。
         </p>
         
         <p>为了实际研究这个方法，我们先构建一个简单的 Ajax load 请求：</p>
         <pre>&lt;button class="trigger"&gt;Trigger&lt;/button&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre>
         <p>可以把事件处理函数附加到任何元素上：</p>
         <pre>$("div.log").ajaxError(function() {
  $(this).text( "Triggered ajaxError handler." );
});</pre>
         <p>现在，我们可以用任意 jQuery 方法来发送一个 Ajax 请求，比如在 click 中发送一个请求：</p>
         <pre>$("button.trigger").click(function() {
  $("div.result").load( "ajax/missing.html" );
});</pre>
         <p>当用户点击按钮后，由于请求的文件不存在，因此 Ajax 请求失败，于是就会显示日志信息。</p>
         
         
         <p><strong>注意：</strong> 由于 <code>.ajaxError()</code> 是作为一个 jQuery 对象实例的方法来实现的，所以我们在回调函数中可以通过 <code>this</code> 关键字来指向原先所选中的元素。
         </p>
         
         
         <p>无论是哪一个 Ajax 请求出错了，所有的 <code>ajaxError</code> 处理函数都会被执行。如果有时必须区分出不同的请求，我们可以使用传递给事件处理函数的参数来识别不同的请求。每次 <code>ajaxError</code> 事件处理函数执行时，都会传递一个事件对象，一个 <code>jqXHR</code> 对象(在 jQuery 1.5 之前, 是 <code>
               <abbr title="XMLHttpRequest">XHR</abbr>
               </code> 对象)，以及一个在请求创建时用的 settings 参数对象。<del>其中 settings 参数对象就是调用 Ajax 请求时，传递给 $.ajax 方法的 settings 对象(有时候是在 jQuery 内部传递的，比如用 load 方法时，jQuery 内部也会调用 $.ajax 方法，并且构造并传递一个
               settings 参数)。通过 settings 对象，我们就可以用来确定这是哪一个请求。</del>如果请求失败了，JavaScript 会抛出一个异常，并将这个异常对象作为第四个参数，传递给事件处理函数。比如说，我们可以限定某个回调函数仅仅处理某个特定的 URL：
         </p>
         <pre>$( "div.log" ).ajaxError(function(e, jqxhr, settings, exception) {
  if ( settings.url == "ajax/missing.html" ) {
    $(this).text( "Triggered ajaxError handler." );
  }
});</pre>
         </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>在 Ajax 请求失败时显示一条信息。</p>
      <h5>jQuery 代码:</h5><pre><code>$("#msg").ajaxError(function(event, request, settings){
  $(this).append("&lt;li&gt;Error requesting page " + settings.url + "&lt;/li&gt;");
});</code></pre></div>
</div>